@using Microsoft.AspNetCore.Http.Extensions
@model MailArchiver.Models.ViewModels.EmailDetailViewModel
@{
    ViewData["Title"] = "Email Details";
    var returnUrl = ViewBag.ReturnUrl?.ToString() ?? Url.Action("Index");
}

<div class="container-fluid">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-3 gap-2">
        <h1 class="h3 mb-0">Email Details</h1>
        
        <!-- Mobile Button Layout -->
        <div class="d-md-none w-100">
            <div class="d-grid gap-2">
                <a href="@returnUrl" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
                <div class="btn-group btn-group-sm">
                    <a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Eml"
                        class="btn btn-outline-primary">
                        <i class="bi bi-envelope"></i> Export EML
                    </a>
                    <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split"
                        data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="visually-hidden">More Export Options</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Csv"
                                class="dropdown-item">
                                <i class="bi bi-filetype-csv me-2"></i>Export as CSV
                            </a></li>
                        <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Json"
                                class="dropdown-item">
                                <i class="bi bi-filetype-json me-2"></i>Export as JSON
                            </a></li>
                    </ul>
                </div>
                <a asp-action="Restore" asp-route-id="@Model.Email.Id" asp-route-returnUrl="@Context.Request.GetDisplayUrl()" 
                   class="btn btn-success btn-sm">
                    <i class="bi bi-envelope-arrow-up"></i> Copy to Mailbox
                </a>
            </div>
        </div>
        
        <!-- Desktop Button Layout -->
        <div class="d-none d-md-flex gap-2">
            <a href="@returnUrl" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to List
            </a>
            <div class="btn-group">
                <a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Eml"
                    class="btn btn-outline-primary">
                    <i class="bi bi-envelope"></i> Export as EML
                </a>
                <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu">
                    <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Csv"
                            class="dropdown-item">Export as CSV</a></li>
                    <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Json"
                            class="dropdown-item">Export as JSON</a></li>
                </ul>
            </div>
            <a asp-action="Restore" asp-route-id="@Model.Email.Id" asp-route-returnUrl="@Context.Request.GetDisplayUrl()" 
               class="btn btn-success">
                <i class="bi bi-envelope-arrow-up"></i> Copy to Mailbox
            </a>
        </div>
    </div>
    
    <!-- Rest of the view remains the same -->
    <div class="card mb-3">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row align-items-start align-items-md-center gap-2">
                <div class="d-flex align-items-center gap-2 flex-wrap">
                    @if (Model.Email.IsOutgoing)
                    {
                        <span class="badge bg-info fs-6">Outgoing</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary fs-6">Incoming</span>
                    }
                    @if (Model.Email.HasAttachments)
                    {
                        <span class="badge bg-warning text-dark">
                            <i class="bi bi-paperclip"></i> Attachments
                        </span>
                    }
                </div>
                <h5 class="mb-0 flex-grow-1">@Model.Email.Subject</h5>
            </div>
        </div>
        
        <!-- Rest of the email content display remains unchanged -->
        <div class="card-body">
            <!-- Email Meta Information in Mobile-friendly format -->
            <div class="row g-2 mb-2">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">Account:</strong>
                </div>
                <div class="col-12 col-md-10">
                    <span class="badge bg-light text-dark border">@Model.AccountName</span>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Email.FolderName))
            {
                <div class="row g-2 mb-2">
                    <div class="col-12 col-md-2">
                        <strong class="text-muted small">Folder:</strong>
                    </div>
                    <div class="col-12 col-md-10">
                        <span class="badge bg-light text-dark border">@Model.Email.FolderName</span>
                    </div>
                </div>
            }
            
            <div class="row g-2 mb-2">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">From:</strong>
                </div>
                <div class="col-12 col-md-10">
                    <span class="email-text-break text-dark">@Model.Email.From</span>
                </div>
            </div>
            
            <div class="row g-2 mb-2">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">To:</strong>
                </div>
                <div class="col-12 col-md-10">
                    <span class="email-text-break text-dark">@Model.Email.To</span>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Email.Cc))
            {
                <div class="row g-2 mb-2">
                    <div class="col-12 col-md-2">
                        <strong class="text-muted small">CC:</strong>
                    </div>
                    <div class="col-12 col-md-10">
                        <span class="email-text-break">@Model.Email.Cc</span>
                    </div>
                </div>
            }
            
            <div class="row g-2 mb-3">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">Date:</strong>
                </div>
                <div class="col-12 col-md-10">
                    @Model.Email.SentDate.ToString("yyyy-MM-dd HH:mm:ss")
                </div>
            </div>
            
            @if (Model.Email.Attachments.Any())
            {
                <div class="row g-2 mb-3">
                    <div class="col-12 col-md-2">
                        <strong class="text-muted small">Attachments:</strong>
                    </div>
                    <div class="col-12 col-md-10">
                        <!-- Mobile: Stacked attachment list -->
                        <div class="d-md-none d-grid gap-2 mobile-attachments">
                            @foreach (var attachment in Model.Email.Attachments)
                            {
                                <a asp-action="Attachment" asp-route-emailId="@Model.Email.Id"
                                    asp-route-attachmentId="@attachment.Id"
                                    class="btn btn-outline-secondary btn-sm text-start d-flex justify-content-between align-items-center">
                                    <span class="text-truncate me-2">
                                        <i class="bi bi-paperclip me-1"></i>@attachment.FileName
                                    </span>
                                    <span class="badge bg-primary">@FormatFileSize(attachment.Size)</span>
                                </a>
                            }
                        </div>
                        <!-- Desktop: List group -->
                        <div class="d-none d-md-block">
                            <div class="list-group">
                                @foreach (var attachment in Model.Email.Attachments)
                                {
                                    <a asp-action="Attachment" asp-route-emailId="@Model.Email.Id"
                                        asp-route-attachmentId="@attachment.Id"
                                        class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                        <span><i class="bi bi-paperclip me-2"></i>@attachment.FileName</span>
                                        <span class="badge bg-primary rounded-pill">@FormatFileSize(attachment.Size)</span>
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            <hr />
            
            <!-- Email Content -->
            <div class="email-content mt-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0 text-muted">Email Content</h6>
                    <a asp-action="RawContent" asp-route-id="@Model.Email.Id" target="_blank"
                        class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-arrows-fullscreen"></i>
                        <span class="d-none d-sm-inline">Full View</span>
                    </a>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Email.HtmlBody))
                {
                    <div class="email-content-container">
                        <iframe id="email-content-frame" src="@Url.Action("RawContent", new { id = Model.Email.Id })"
                            class="w-100 border rounded email-iframe" sandbox="allow-same-origin allow-popups"></iframe>
                    </div>
                }
                else
                {
                    <div class="border rounded p-3 bg-light">
                        <pre class="mb-0 email-text-content">@Model.Email.Body</pre>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- JavaScript remains the same -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const iframe = document.getElementById('email-content-frame');
        if (iframe) {
            const isMobile = window.innerWidth < 768;
            if (isMobile) {
                iframe.style.height = '300px';
            } else {
                iframe.style.height = '400px';
            }
            
            iframe.onload = function () {
                if (!isMobile) {
                    setTimeout(function () {
                        try {
                            const iframeHeight = Math.min(iframe.contentWindow.document.body.scrollHeight + 30, 600);
                            iframe.style.height = iframeHeight + 'px';
                        } catch (e) {
                            console.error('Could not adjust iframe height:', e);
                        }
                    }, 300);
                }
            };
        }
    });
</script>

@functions {
    string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }
}