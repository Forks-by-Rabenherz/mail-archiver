@using Microsoft.AspNetCore.Http.Extensions
@inject Microsoft.Extensions.Localization.IStringLocalizer<MailArchiver.SharedResource> Localizer
@model MailArchiver.Models.ViewModels.EmailDetailViewModel
@{
    ViewData["Title"] = @Localizer["EmailDetails"];
    var returnUrl = ViewBag.ReturnUrl?.ToString() ?? Url.Action("Index");
}

<div class="container-fluid">
    <div
        class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-3 gap-2">
        <h1 class="h3 mb-0">@Localizer["EmailDetails"]</h1>

        <!-- Mobile Button Layout -->
        <div class="d-md-none w-100">
            <div class="d-grid gap-2">
                <a href="@returnUrl" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-arrow-left"></i> @Localizer["BackToList"]
                </a>
                <div class="btn-group btn-group-sm">
                    <a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Eml"
                        class="btn btn-outline-primary">
                        <i class="bi bi-envelope"></i> @Localizer["ExportEML"]
                    </a>
                    <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split"
                        data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="visually-hidden">@Localizer["MoreExportOptions"]</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Csv"
                                class="dropdown-item">
                                <i class="bi bi-filetype-csv me-2"></i>@Localizer["ExportCSV"]
                            </a></li>
                        <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Json"
                                class="dropdown-item">
                                <i class="bi bi-filetype-json me-2"></i>@Localizer["ExportJSON"]
                            </a></li>
                    </ul>
                </div>
                <a asp-action="Restore" asp-route-id="@Model.Email.Id"
                    asp-route-returnUrl="@Context.Request.GetDisplayUrl()" class="btn btn-success btn-sm">
                    <i class="bi bi-envelope-arrow-up"></i> @Localizer["CopyToMailbox"]
                </a>
            </div>
        </div>

        <!-- Desktop Button Layout -->
        <div class="d-none d-md-flex gap-2">
            <a href="@returnUrl" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> @Localizer["BackToList"]
            </a>
            <div class="btn-group">
                <a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Eml"
                    class="btn btn-outline-primary">
                    <i class="bi bi-envelope"></i> @Localizer["ExportEML"]
                </a>
                <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">@Localizer["ToggleDropdown"]</span>
                </button>
                <ul class="dropdown-menu">
                    <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Csv"
                           class="dropdown-item">@Localizer["ExportCSV"]</a>
                    </li>
                    <li><a asp-action="Export" asp-route-id="@Model.Email.Id" asp-route-format="Json"
                           class="dropdown-item">@Localizer["ExportJSON"]</a>
                    </li>
                </ul>
            </div>
            <a asp-action="Restore" asp-route-id="@Model.Email.Id"
                asp-route-returnUrl="@Context.Request.GetDisplayUrl()" class="btn btn-success">
                <i class="bi bi-envelope-arrow-up"></i> @Localizer["CopyToMailbox"]
            </a>
        </div>
    </div>

    <!-- Rest of the view remains the same -->
    <div class="card mb-3">
        <div class="card-header bg-light">
            <div class="d-flex flex-column flex-md-row align-items-start align-items-md-center gap-2">
                <div class="d-flex align-items-center gap-2 flex-wrap">
                    @if (Model.Email.IsOutgoing)
                    {
                        <span class="badge bg-info fs-6">@Localizer["Outgoing"]</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary fs-6">@Localizer["Incoming"]</span>
                    }
                    @if (Model.Email.HasAttachments)
                    {
                        <span class="badge bg-warning text-dark">
                            <i class="bi bi-paperclip"></i> @Localizer["Attachments"]
                        </span>
                    }
                </div>
                <h5 class="mb-0 flex-grow-1">@Model.Email.Subject</h5>
            </div>
        </div>

        <!-- Rest of the email content display remains unchanged -->
        <div class="card-body">
            <!-- Email Meta Information in Mobile-friendly format -->
            <div class="row g-2 mb-2">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">@Localizer["Account"]:</strong>
                </div>
                <div class="col-12 col-md-10">
                    <span class="badge bg-light text-dark border">@Model.AccountName</span>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Email.FolderName))
            {
                <div class="row g-2 mb-2">
                    <div class="col-12 col-md-2">
                        <strong class="text-muted small">@Localizer["Folder"]:</strong>
                    </div>
                    <div class="col-12 col-md-10">
                        <span class="badge bg-light text-dark border">@Model.Email.FolderName</span>
                    </div>
                </div>
            }

            <div class="row g-2 mb-2">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">@Localizer["From"]:</strong>
                </div>
                <div class="col-12 col-md-10">
                    <span class="email-text-break text-dark">@Model.Email.From</span>
                </div>
            </div>

            <div class="row g-2 mb-2">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">@Localizer["To"]:</strong>
                </div>
                <div class="col-12 col-md-10">
                    <span class="email-text-break text-dark">@Model.Email.To</span>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Email.Cc))
            {
                <div class="row g-2 mb-2">
                    <div class="col-12 col-md-2">
                        <strong class="text-muted small">CC:</strong>
                    </div>
                    <div class="col-12 col-md-10">
                        <span class="email-text-break text-dark">@Model.Email.Cc</span>
                    </div>
                </div>
            }

            <div class="row g-2 mb-3">
                <div class="col-12 col-md-2">
                    <strong class="text-muted small">@Localizer["Date"]:</strong>
                </div>
                <div class="col-12 col-md-10">
                    @Model.Email.SentDate.ToString(System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.ShortDatePattern + " " + System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.ShortTimePattern)
                </div>
            </div>

            @if (Model.Email.Attachments.Any())
            {
                <div class="row g-2 mb-3">
                    <div class="col-12 col-md-2">
                        <strong class="text-muted small">@Localizer["Attachments"]:</strong>
                    </div>
                    <div class="col-12 col-md-10">
                        <!-- Mobile: Stacked attachment list -->
                        <div class="d-md-none d-grid gap-2 mobile-attachments">
                            @foreach (var attachment in Model.Email.Attachments)
                            {
                                <button type="button" 
                                    class="btn btn-outline-secondary btn-sm text-start d-flex justify-content-between align-items-center attachment-preview-btn"
                                    data-email-id="@Model.Email.Id"
                                    data-attachment-id="@attachment.Id"
                                    data-filename="@attachment.FileName"
                                    data-content-type="@attachment.ContentType"
                                    data-download-url="@Url.Action("Attachment", new { emailId = Model.Email.Id, attachmentId = attachment.Id })"
                                    data-preview-url="@Url.Action("AttachmentPreview", new { emailId = Model.Email.Id, attachmentId = attachment.Id })">
                                    <span class="text-truncate me-2">
                                        <i class="bi bi-paperclip me-1"></i>@attachment.FileName
                                    </span>
                                    <span class="badge bg-primary">@FormatFileSize(attachment.Size)</span>
                                </button>
                            }
                        </div>
                        <!-- Desktop: List group -->
                        <div class="d-none d-md-block">
                            <div class="list-group">
                                @foreach (var attachment in Model.Email.Attachments)
                                {
                                    <button type="button"
                                        class="list-group-item list-group-item-action d-flex justify-content-between align-items-center attachment-preview-btn"
                                        data-email-id="@Model.Email.Id"
                                        data-attachment-id="@attachment.Id"
                                        data-filename="@attachment.FileName"
                                        data-content-type="@attachment.ContentType"
                                        data-download-url="@Url.Action("Attachment", new { emailId = Model.Email.Id, attachmentId = attachment.Id })"
                                        data-preview-url="@Url.Action("AttachmentPreview", new { emailId = Model.Email.Id, attachmentId = attachment.Id })">
                                        <span><i class="bi bi-paperclip me-2"></i>@attachment.FileName</span>
                                        <span class="badge bg-primary rounded-pill">@FormatFileSize(attachment.Size)</span>
                                    </button>
                                }
                            </div>
                        </div>
                        <!-- Download all attachments button -->
                        <div class="mt-2">
                            <a asp-action="DownloadAllAttachments" asp-route-id="@Model.Email.Id" class="btn btn-primary btn-sm">
                                <i class="bi bi-download"></i> @Localizer["DownloadAllAttachments"]
                            </a>
                        </div>
                    </div>
                </div>
            }

            <hr />

            <!-- Email Content -->
            <div class="email-content mt-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0 text-muted">@Localizer["EmailContent"]</h6>
                    <a asp-action="RawContent" asp-route-id="@Model.Email.Id" target="_blank"
                        class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-arrows-fullscreen"></i>
                        <span class="d-none d-sm-inline">@Localizer["FullView"]</span>
                    </a>
                </div>

                @if (!string.IsNullOrEmpty(Model.Email.HtmlBody))
                {
                    <div class="email-content-container">
                        <iframe id="email-content-frame" src="@Url.Action("RawContent", new { id = Model.Email.Id })"
                            class="w-100 border rounded email-iframe" sandbox="allow-same-origin allow-popups"></iframe>
                    </div>
                }
                else
                {
                    <div class="border rounded p-3 bg-light">
                        <pre class="mb-0 email-text-content">@Model.Email.Body</pre>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Attachment Preview Modal -->
<div class="modal fade" id="attachmentPreviewModal" tabindex="-1" aria-labelledby="attachmentPreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="attachmentPreviewModalLabel">@Localizer["AttachmentPreview"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 id="previewFileName" class="mb-0"></h6>
                    <a id="downloadAttachmentBtn" class="btn btn-primary" href="">
                        <i class="bi bi-download"></i> @Localizer["Download"]
                    </a>
                </div>
                <div id="previewContent" class="text-center" style="min-height: 400px; max-height: 70vh; overflow: auto;">
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i> @Localizer["Close"]
                </button>
                <a id="downloadAttachmentBtnFooter" class="btn btn-primary" href="">
                    <i class="bi bi-download"></i> @Localizer["Download"]
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    // Localized strings for JavaScript
    const localizedStrings = {
        previewNotAvailable: '@Localizer["PreviewNotAvailable"]',
        fileTypeCannotBePreviewed: '@Localizer["FileTypeCannotBePreviewed"]'
    };

    document.addEventListener('DOMContentLoaded', function () {
        const iframe = document.getElementById('email-content-frame');
        if (iframe) {
            const isMobile = window.innerWidth < 768;
            if (isMobile) {
                iframe.style.height = '300px';
            } else {
                iframe.style.height = '400px';
            }

            iframe.onload = function () {
                if (!isMobile) {
                    setTimeout(function () {
                        try {
                            const iframeHeight = Math.min(iframe.contentWindow.document.body.scrollHeight + 30, 600);
                            iframe.style.height = iframeHeight + 'px';
                        } catch (e) {
                            console.error('Could not adjust iframe height:', e);
                        }
                    }, 300);
                }
            };
        }

        // Attachment preview functionality
        const previewButtons = document.querySelectorAll('.attachment-preview-btn');
        const previewModal = new bootstrap.Modal(document.getElementById('attachmentPreviewModal'));
        const previewContent = document.getElementById('previewContent');
        const previewFileName = document.getElementById('previewFileName');
        const downloadBtn = document.getElementById('downloadAttachmentBtn');
        const downloadBtnFooter = document.getElementById('downloadAttachmentBtnFooter');

        previewButtons.forEach(button => {
            button.addEventListener('click', function () {
                const emailId = this.getAttribute('data-email-id');
                const attachmentId = this.getAttribute('data-attachment-id');
                const fileName = this.getAttribute('data-filename');
                const contentType = this.getAttribute('data-content-type');
                const downloadUrl = this.getAttribute('data-download-url');
                const previewUrl = this.getAttribute('data-preview-url');

                // Set file name in modal header
                previewFileName.textContent = fileName;

                // Set download links
                downloadBtn.href = downloadUrl;
                downloadBtnFooter.href = downloadUrl;

                // Show loading spinner
                previewContent.innerHTML = '<div class="d-flex justify-content-center align-items-center h-100"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';

                // Show modal
                previewModal.show();

                // Determine how to display based on content type
                if (contentType.startsWith('image/')) {
                    // Display image directly
                    previewContent.innerHTML = `<img src="${previewUrl}" class="img-fluid" alt="${fileName}" style="max-height: 70vh;">`;
                } else if (contentType === 'application/pdf') {
                    // Display PDF using embed
                    previewContent.innerHTML = `<embed src="${previewUrl}" type="application/pdf" width="100%" height="600px" />`;
                } else if (contentType.startsWith('text/')) {
                    // Display text files
                    fetch(previewUrl)
                        .then(response => response.text())
                        .then(text => {
                            previewContent.innerHTML = `<pre class="text-start" style="white-space: pre-wrap; max-height: 70vh; overflow: auto;">${escapeHtml(text)}</pre>`;
                        })
                        .catch(error => {
                            previewContent.innerHTML = `<div class="alert alert-danger">Error loading file: ${error.message}</div>`;
                        });
                } else {
                    // For other file types, show download prompt
                    previewContent.innerHTML = `
                        <div class="d-flex flex-column align-items-center justify-content-center h-100">
                            <i class="bi bi-file-earmark-arrow-down" style="font-size: 4rem;"></i>
                            <h5 class="mt-3">${localizedStrings.previewNotAvailable}</h5>
                            <p>${localizedStrings.fileTypeCannotBePreviewed}</p>
                        </div>
                    `;
                }
            });
        });

        // Helper function to escape HTML
        function escapeHtml(text) {
            const map = {
                '&': '&',
                '<': '<',
                '>': '>',
                '"': '"',
                "'": '&#039;'
            };
            
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }
    });
</script>

@functions {
    string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }
}
