@using Microsoft.AspNetCore.Http.Extensions
@using MailArchiver.Services
@inject MailArchiver.Services.IAuthenticationService AuthService
@inject Microsoft.Extensions.Localization.IStringLocalizer<MailArchiver.SharedResource> Localizer
@model MailArchiver.Models.ViewModels.SearchViewModel
@{
    ViewData["Title"] = Localizer["EmailArchive"];
}

@* Anti-Forgery Token für JavaScript *@
@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3">@Localizer["EmailArchive"]</h1>
    </div>

    @* Active Jobs Alert *@
    @if (AuthService.IsCurrentUserAdmin(Context) && ViewBag.ActiveJobsCount != null && ViewBag.ActiveJobsCount > 0)
    {
        <div class="alert alert-info alert-dismissible fade show">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                <div>
                    <i class="bi bi-clock-history me-2"></i>
                    <strong>@ViewBag.ActiveJobsCount</strong> background job(s) are currently running.
                </div>
                <div>
                    <a asp-action="Jobs" class="btn btn-outline-primary btn-sm me-2">
                        <i class="bi bi-eye me-1"></i> View Jobs
                    </a>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">@Localizer["Search"]</h6>
        </div>
        <div class="card-body">
            <form asp-action="Index" method="get" id="searchForm">
                <div class="row">
                    <div class="col-12 col-md-6 col-lg-4 mb-3">
                        <label asp-for="SearchTerm" class="form-label">@Localizer["SearchTerm"]</label>
                        <input asp-for="SearchTerm" class="form-control form-control-sm" placeholder="@Localizer["SubjectSender"]" />
                        <div class="form-text small text-muted">
                            <i class="bi bi-info-circle me-1"></i>
                            <strong>@Localizer["AdvancedSearch"]</strong><br>
                            @Localizer["AdvancedSearchInfo1"]<br>
                            @Localizer["AdvancedSearchInfo2"]<br>
                            @Localizer["AdvancedSearchInfo3"]
                        </div>
                    </div>
                    <div class="col-6 col-md-3 col-lg-2 mb-3">
                        <label asp-for="FromDate" class="form-label">@Localizer["From"]</label>
                        <input asp-for="FromDate" class="form-control form-control-sm" type="date" />
                    </div>
                    <div class="col-6 col-md-3 col-lg-2 mb-3">
                        <label asp-for="ToDate" class="form-label">@Localizer["To"]</label>
                        <input asp-for="ToDate" class="form-control form-control-sm" type="date" />
                    </div>
                    <div class="col-12 col-md-6 col-lg-2 mb-3">
                        <label asp-for="SelectedAccountId" class="form-label">@Localizer["Account"]</label>
                        <select asp-for="SelectedAccountId" asp-items="Model.AccountOptions" class="form-select form-select-sm"></select>
                    </div>
                    <div class="col-12 col-md-6 col-lg-2 mb-3">
                        <label asp-for="IsOutgoing" class="form-label">@Localizer["Direction"]</label>
                        <select asp-for="IsOutgoing" asp-items="Model.DirectionOptions" class="form-select form-select-sm"></select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex flex-column flex-md-row justify-content-between gap-2">
                            <div class="d-flex flex-wrap gap-2">
                                <button type="submit" class="btn btn-primary btn-sm">
                                    <i class="bi bi-search"></i> @Localizer["Search"]
                                </button>
                                <a asp-action="Index" class="btn btn-outline-secondary btn-sm">@Localizer["Reset"]</a>
                                <div class="form-check d-flex align-items-center ms-2">
                                    <input class="form-check-input me-2" type="checkbox" id="toggleSelectionMode" name="ShowSelectionControls" value="true"
                                           @(Model.ShowSelectionControls ? "checked" : "")>
                                    <label class="form-check-label small" for="toggleSelectionMode">@Localizer["SelectionMode"]</label>
                                    <input type="hidden" id="userTimezone" name="UserTimezone" value="" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @* Batch Operation Information *@
    @if (Model.ShowSelectionControls)
    {
        <div class="card mb-4 border-info">
            <div class="card-header bg-light">
                <h6 class="mb-0 text-info">
                    <i class="bi bi-info-circle me-1"></i>@Localizer["BatchOperationInformation"]
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12 col-lg-8">
                        <div class="row">
                            <div class="col-12 col-md-4 mb-2">
                                <small class="text-muted d-block">@Localizer["DirectProcessing"]</small>
                                <strong class="text-success">1 - @ViewBag.AsyncThreshold emails</strong>
                                <small class="d-block text-muted">@Localizer["ProcessOnPage"]</small>
                            </div>
                            <div class="col-12 col-md-4 mb-2">
                                <small class="text-muted d-block">@Localizer["BackgroundJob"]</small>
                                <strong class="text-primary">@(ViewBag.AsyncThreshold + 1) - @ViewBag.MaxAsyncEmails.ToString("N0") emails</strong>
                                <small class="d-block text-muted">@Localizer["ProcessInBackground"]</small>
                            </div>
                            <div class="col-12 col-md-4 mb-2">
                                <small class="text-muted d-block">@Localizer["MaximumLimit"]</small>
                                <strong class="text-warning">@ViewBag.MaxAsyncEmails.ToString("N0") emails</strong>
                                <small class="d-block text-muted">@Localizer["SplitLargerOperations"]</small>
                            </div>
                        </div>
                    </div>
                    @if (AuthService.IsCurrentUserAdmin(Context))
                    {
                        <div class="col-12 col-lg-4">
                            <div class="d-flex flex-column gap-2">
                                @if (ViewBag.ActiveJobsCount != null && ViewBag.ActiveJobsCount > 0)
                                {
                                    <div class="alert alert-warning mb-2 p-2">
                                        <small>
                                            <i class="bi bi-clock-history me-1"></i>
                                            <strong>@ViewBag.ActiveJobsCount active job(s)</strong> currently running
                                        </small>
                                    </div>
                                    <a asp-action="Jobs" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-eye me-1"></i>@Localizer["MonitorBackgroundJobs"]
                                    </a>
                                }
                                else
                                {
                                    <small class="text-muted">
                                        <i class="bi bi-check-circle me-1 text-success"></i>
                                        @Localizer["NoBackgroundJobsRunning"]
                                    </small>
                                    <a asp-action="Jobs" class="btn btn-outline-secondary btn-sm">
                                        <i class="bi bi-clock-history me-1"></i>@Localizer["ViewJobHistory"]
                                    </a>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (Model.SearchResults != null && Model.SearchResults.Any())
    {
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                    <span class="small"><strong>@Model.TotalResults</strong> @Localizer["EmailsFound", ""]</span>
                    <span class="small">@Localizer["PageOf", Model.PageNumber, Model.TotalPages]</span>
                </div>
            </div>
            
            @if (Model.ShowSelectionControls)
            {
                <div class="p-2 bg-light border-bottom">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start gap-2">
                        <div class="d-flex flex-wrap gap-2 align-items-center">
                            <button type="button" id="selectAllBtn" class="btn btn-sm btn-outline-primary">@Localizer["SelectAll"]</button>
                            <button type="button" id="deselectAllBtn" class="btn btn-sm btn-outline-secondary">@Localizer["DeselectAll"]</button>
                            <span id="selectionCounter" class="badge bg-primary">0 selected</span>
                            <span id="operationMode" class="badge bg-info" style="display:none;"></span>
                        </div>
                        <div id="selectionActions" style="display:none;">
                            <button type="button" id="batchRestoreBtn" class="btn btn-sm btn-success me-2">
                                <i class="bi bi-envelope-arrow-up"></i>
                                <span class="d-inline">@Localizer["CopySelected"]</span>
                            </button>
                            <button type="button" id="exportSelectedBtn" class="btn btn-sm btn-primary">
                                <i class="bi bi-download"></i>
                                <span class="d-inline">@Localizer["ExportSelected"]</span>
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Desktop Tabelle -->
            <div class="card-body p-0 d-none d-lg-block">
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-dark">
                            <tr>
                                @if (Model.ShowSelectionControls)
                                {
                                    <th style="width: 50px;">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="selectAllCheckbox">
                                        </div>
                                    </th>
                                }
                                <th>@Localizer["Subject"]</th>
                                <th>@Localizer["From"]</th>
                                <th>@Localizer["To"]</th>
                                <th>@Localizer["Date"]</th>
                                <th>@Localizer["Account"]</th>
                                <th>@Localizer["Attachments"]</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var email in Model.SearchResults)
                            {
                                <tr>
                                    @if (Model.ShowSelectionControls)
                                    {
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input email-select-checkbox" type="checkbox"
                                                       name="ids" value="@email.Id">
                                            </div>
                                        </td>
                                    }
                                    <td>
                                        @if (email.IsOutgoing)
                                        {
                                            <span class="badge bg-info">@Localizer["Out"]</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">@Localizer["In"]</span>
                                        }
                                        @email.Subject
                                    </td>
                                    <td>@email.From</td>
                                    <td>@email.To</td>
                                    <td>@email.SentDate.ToString("g")</td>
                                    <td>@email.MailAccount.Name</td>
                                    <td>
                                        @if (email.HasAttachments)
                                        {
                                            <i class="bi bi-paperclip text-warning"></i>
                                        }
                                    </td>
                                    <td>
                                        <a asp-action="Details" 
                                        asp-route-id="@email.Id" 
                                        asp-route-returnUrl="@Context.Request.GetDisplayUrl()" 
                                        class="btn btn-sm btn-outline-primary">@Localizer["Details"]</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Mobile Cards - Diese werden auf Mobilgeräten UND Tablets angezeigt -->
            <div class="d-lg-none p-3">
                @foreach (var email in Model.SearchResults)
                {
                    <div class="card mb-3 email-card-mobile">
                        @if (Model.ShowSelectionControls)
                        {
                            <div class="form-check mb-2">
                                <input class="form-check-input email-select-checkbox" type="checkbox"
                                       name="ids" value="@email.Id" id="email-mobile-@email.Id">
                                <label class="form-check-label small text-muted" for="email-mobile-@email.Id">
                                    @Localizer["SelectThisEmail"]
                                </label>
                            </div>
                        }
                        <div class="card-body p-3">
                            <div class="email-card-header">
                                <div class="email-card-title">
                                    @if (email.IsOutgoing)
                                    {
                                        <i class="bi bi-arrow-up-right text-primary me-1"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-left text-success me-1"></i>
                                    }
                                    @email.Subject
                                    @if (email.HasAttachments)
                                    {
                                        <i class="bi bi-paperclip text-warning ms-1"></i>
                                    }
                                </div>
                            </div>
                            <div class="email-card-meta">
                                <div><strong>@Localizer["From"]:</strong> @email.From</div>
                                <div><strong>@Localizer["To"]:</strong> @(email.To.Length > 50 ? email.To.Substring(0, 50) + "..." : email.To)</div>
                                <div><strong>@Localizer["Date"]:</strong> @email.SentDate.ToString("g")</div>
                                <div><strong>@Localizer["Account"]:</strong> @email.MailAccount.Name</div>
                            </div>
                            <div class="email-card-actions">
                                <a asp-action="Details" 
                                asp-route-id="@email.Id" 
                                asp-route-returnUrl="@Context.Request.GetDisplayUrl()" 
                                class="btn btn-outline-primary btn-sm w-100">
                                    <i class="bi bi-eye"></i> @Localizer["Details"]
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            <div class="card-footer">
                <nav>
                    <ul class="pagination pagination-sm justify-content-center mb-0">
                        @if (Model.PageNumber > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = Model.PageNumber - 1,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">@Localizer["Previous"]</a>
                            </li>
                        }
                        @{
                            var startPage = Math.Max(1, Model.PageNumber - 1);
                            var endPage = Math.Min(Model.TotalPages, Model.PageNumber + 1);
                        }
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = i,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">@i</a>
                            </li>
                        }
                        @if (Model.PageNumber < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = Model.PageNumber + 1,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">@Localizer["Next"]</a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
    else if (Model.SearchResults != null)
    {
        <div class="text-center py-5">
            <div class="mb-3">
                <i class="bi bi-search display-1 text-muted"></i>
            </div>
            <h5 class="text-muted">@Localizer["NoEmailsFoundTitle"]</h5>
            <p class="text-muted">@Localizer["NoEmailsFoundText"]</p>
        </div>
    }
</div>

<!-- Batch Restore Confirmation Modal -->
<div class="modal fade" id="batchRestoreConfirmModal" tabindex="-1" aria-labelledby="batchRestoreConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="batchRestoreConfirmModalLabel">@Localizer["ConfirmBatchRestore"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["Cancel"]</button>
                <button type="button" class="btn btn-primary" id="confirmBatchRestoreBtn">@Localizer["Continue"]</button>
            </div>
        </div>
    </div>
</div>

<!-- Export Format Selection Modal -->
<div class="modal fade" id="exportFormatModal" tabindex="-1" aria-labelledby="exportFormatModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportFormatModalLabel">@Localizer["ExportSelected"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <h6>@Localizer["ExportFormatSelection"]</h6>
                    <p class="text-muted small">@Localizer["ExportFormatSelectionInfo"]</p>
                </div>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-body">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="exportFormat" id="formatEML" value="EML" checked>
                                    <label class="form-check-label" for="formatEML">
                                        <strong>@Localizer["EMLFormat"]</strong>
                                    </label>
                                </div>
                                <small class="text-muted">@Localizer["EMLFormatDescription"]</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-body">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="exportFormat" id="formatMBox" value="MBox">
                                    <label class="form-check-label" for="formatMBox">
                                        <strong>@Localizer["MBoxFormat"]</strong>
                                    </label>
                                </div>
                                <small class="text-muted">@Localizer["MBoxFormatDescription"]</small>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="alert alert-info">
                    <small>
                        <i class="bi bi-info-circle me-1"></i>
                        @Localizer["ExportSelectedInfo"]
                    </small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["Cancel"]</button>
                <button type="button" class="btn btn-primary" id="confirmExportBtn">@Localizer["StartExport"]</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Email selection script initialized");
            const timezoneInput = document.getElementById('userTimezone');
            if (timezoneInput) {
                timezoneInput.value = Intl.DateTimeFormat().resolvedOptions().timeZone;
            }

            // Configuration from ViewBag
            const asyncThreshold = @ViewBag.AsyncThreshold;
            const maxAsyncEmails = @ViewBag.MaxAsyncEmails;
            const maxSelectableEmails = @(ViewBag.MaxSelectableEmails ?? 250);
            
            // Cross-page selection storage key
            const STORAGE_KEY = 'emailSelection';
            
            // Get elements
            const toggleSelectionMode = document.getElementById('toggleSelectionMode');
            const searchForm = document.getElementById('searchForm');
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const selectAllBtn = document.getElementById('selectAllBtn');
            const deselectAllBtn = document.getElementById('deselectAllBtn');
            const selectionCounter = document.getElementById('selectionCounter');
            const selectionActions = document.getElementById('selectionActions');
            const batchRestoreBtn = document.getElementById('batchRestoreBtn');
            const operationMode = document.getElementById('operationMode');

            console.log("Selection controls visible: " + @(Model.ShowSelectionControls ? "true" : "false"));
            console.log("Max selectable emails: " + maxSelectableEmails);

            // Cross-page selection management
            function getStoredSelections() {
                try {
                    const stored = localStorage.getItem(STORAGE_KEY);
                    return stored ? JSON.parse(stored) : [];
                } catch (e) {
                    console.warn('Error reading stored selections:', e);
                    return [];
                }
            }

            function saveStoredSelections(selections) {
                try {
                    localStorage.setItem(STORAGE_KEY, JSON.stringify(selections));
                } catch (e) {
                    console.warn('Error saving selections:', e);
                }
            }

            function addToStoredSelections(emailIds) {
                const stored = getStoredSelections();
                const updated = [...new Set([...stored, ...emailIds])]; // Remove duplicates
                
                // Enforce maximum limit
                if (updated.length > maxSelectableEmails) {
                    const message = '@Localizer["MaxSelectionsReached"]'.replace('{0}', maxSelectableEmails);
                    alert(message);
                    return false;
                }
                
                saveStoredSelections(updated);
                return true;
            }

            function removeFromStoredSelections(emailIds) {
                const stored = getStoredSelections();
                const updated = stored.filter(id => !emailIds.includes(id));
                saveStoredSelections(updated);
            }

            function clearStoredSelections() {
                localStorage.removeItem(STORAGE_KEY);
            }

            function getTotalSelectedCount() {
                return getStoredSelections().length;
            }

            // Update button texts based on selection state
            function updateButtonTexts() {
                const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                const currentPageIds = Array.from(emailCheckboxes).map(cb => cb.value);
                const storedSelections = getStoredSelections();
                const currentPageSelected = currentPageIds.filter(id => storedSelections.includes(id));
                
                if (selectAllBtn) {
                    if (currentPageSelected.length === currentPageIds.length) {
                        selectAllBtn.innerHTML = '@Html.Raw(Localizer["DeselectAllOnPage"].Value)';
                        selectAllBtn.className = 'btn btn-sm btn-outline-secondary';
                    } else {
                        selectAllBtn.innerHTML = '@Html.Raw(Localizer["SelectAllOnPage"].Value)';
                        selectAllBtn.className = 'btn btn-sm btn-outline-primary';
                    }
                }
            }

            // Toggle selection mode using form submit
            if (toggleSelectionMode) {
                toggleSelectionMode.addEventListener('change', function() {
                    console.log("Selection mode toggled: " + this.checked);
                    clearStoredSelections();
                    searchForm.submit();
                });
            }

            // Update selection counter and mode indicator
            function updateSelectionCounter() {
                const totalSelected = getTotalSelectedCount();
                const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                const checkedBoxes = document.querySelectorAll('.email-select-checkbox:checked');
                
                console.log("Total selected across all pages: " + totalSelected);
                console.log("Selected on current page: " + checkedBoxes.length);
                
                if (selectionCounter) {
                    if (totalSelected >= maxSelectableEmails) {
                        selectionCounter.innerHTML = '@Html.Raw(Localizer["MaxSelectionsReached"].Value)'.replace('{0}', maxSelectableEmails);
                        selectionCounter.className = 'badge bg-warning';
                    } else {
                        selectionCounter.innerHTML = '@Html.Raw(Localizer["SelectedOf"].Value)'.replace('{0}', totalSelected).replace('{1}', maxSelectableEmails);
                        selectionCounter.className = 'badge bg-primary';
                    }
                }

                // Update operation mode indicator
                if (operationMode && totalSelected > 0) {
                    operationMode.style.display = 'inline';
                    if (totalSelected <= asyncThreshold) {
                        operationMode.textContent = '@Localizer["DirectProcessingMode"]';
                        operationMode.className = 'badge bg-success';
                    } else if (totalSelected <= maxAsyncEmails) {
                        operationMode.textContent = '@Localizer["BackgroundJobMode"]';
                        operationMode.className = 'badge bg-primary';
                    } else {
                        operationMode.textContent = '@Localizer["TooManySelected"]';
                        operationMode.className = 'badge bg-danger';
                    }
                } else if (operationMode) {
                    operationMode.style.display = 'none';
                }

                // Show/hide batch actions
                if (selectionActions) {
                    if (totalSelected > 0) {
                        selectionActions.style.display = 'block';
                        
                        // Update button state based on count
                        if (batchRestoreBtn) {
                            if (totalSelected > maxAsyncEmails) {
                                batchRestoreBtn.disabled = true;
                                batchRestoreBtn.innerHTML = '<i class="bi bi-exclamation-triangle"></i> <span class="d-inline">@Localizer["TooManySelected"]</span>';
                                batchRestoreBtn.className = 'btn btn-sm btn-danger me-2';
                            } else {
                                batchRestoreBtn.disabled = false;
                                batchRestoreBtn.innerHTML = '<i class="bi bi-envelope-arrow-up"></i> <span class="d-inline">@Localizer["CopySelected"]</span>';
                                batchRestoreBtn.className = 'btn btn-sm btn-success me-2';
                            }
                        }
                    } else {
                        selectionActions.style.display = 'none';
                    }
                }

                // Update select all checkbox state on current page
                if (selectAllCheckbox && emailCheckboxes.length > 0) {
                    selectAllCheckbox.checked = checkedBoxes.length === emailCheckboxes.length;
                    selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < emailCheckboxes.length;
                }

                updateButtonTexts();
            }

            // Initialize counter and attach events
            function initializeSelectionHandlers() {
                const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                const storedSelections = getStoredSelections();
                
                console.log("Found email checkboxes: " + emailCheckboxes.length);
                console.log("Stored selections: ", storedSelections);

                // Restore selections for current page
                emailCheckboxes.forEach(function(checkbox) {
                    if (storedSelections.includes(checkbox.value)) {
                        checkbox.checked = true;
                    }
                    
                    // Individual checkbox change
                    checkbox.addEventListener('change', function() {
                        const isChecked = this.checked;
                        const emailId = this.value;
                        
                        if (isChecked) {
                            if (!addToStoredSelections([emailId])) {
                                // Maximum reached, uncheck the box
                                this.checked = false;
                                return;
                            }
                        } else {
                            removeFromStoredSelections([emailId]);
                        }
                        
                        updateSelectionCounter();
                    });
                });

                updateSelectionCounter();
            }

            // Select/deselect all checkboxes on current page
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    const isChecked = this.checked;
                    const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                    const currentPageIds = Array.from(emailCheckboxes).map(cb => cb.value);
                    
                    if (isChecked) {
                        // Try to add all current page IDs
                        if (addToStoredSelections(currentPageIds)) {
                            emailCheckboxes.forEach(function(checkbox) {
                                checkbox.checked = true;
                            });
                        } else {
                            // If we can't add all, uncheck the select all box
                            this.checked = false;
                        }
                    } else {
                        // Remove all current page IDs
                        removeFromStoredSelections(currentPageIds);
                        emailCheckboxes.forEach(function(checkbox) {
                            checkbox.checked = false;
                        });
                    }
                    
                    updateSelectionCounter();
                });
            }

            // Select all button - only for current page
            if (selectAllBtn) {
                selectAllBtn.addEventListener('click', function() {
                    const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                    const currentPageIds = Array.from(emailCheckboxes).map(cb => cb.value);
                    const storedSelections = getStoredSelections();
                    const currentPageSelected = currentPageIds.filter(id => storedSelections.includes(id));
                    
                    if (currentPageSelected.length === currentPageIds.length) {
                        // All are selected, deselect all on current page
                        removeFromStoredSelections(currentPageIds);
                        emailCheckboxes.forEach(function(checkbox) {
                            checkbox.checked = false;
                        });
                    } else {
                        // Not all are selected, select all on current page
                        if (addToStoredSelections(currentPageIds)) {
                            emailCheckboxes.forEach(function(checkbox) {
                                checkbox.checked = true;
                            });
                        }
                    }
                    
                    updateSelectionCounter();
                });
            }

            // Deselect all button - clears all selections across all pages
            if (deselectAllBtn) {
                deselectAllBtn.addEventListener('click', function() {
                    clearStoredSelections();
                    const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                    emailCheckboxes.forEach(function(checkbox) {
                        checkbox.checked = false;
                    });
                    updateSelectionCounter();
                });
            }

            // Batch restore button
            if (batchRestoreBtn) {
                batchRestoreBtn.addEventListener('click', function() {
                    if (this.disabled) {
                        return;
                    }

                    const totalSelected = getTotalSelectedCount();
                    const storedSelections = getStoredSelections();
                    
                    if (totalSelected === 0) {
                        // Show modal for no emails selected
                        document.getElementById('confirmMessage').innerHTML = '@Html.Raw(Localizer["PleaseSelectAtLeastOne"].Value)';
                        var confirmModal = new bootstrap.Modal(document.getElementById('batchRestoreConfirmModal'));
                        document.getElementById('confirmBatchRestoreBtn').style.display = 'none';
                        confirmModal.show();
                        
                        // Hide modal after 3 seconds
                        setTimeout(function() {
                            confirmModal.hide();
                        }, 3000);
                        return;
                    }

                    if (totalSelected > maxAsyncEmails) {
                        // Show modal for too many emails selected
                        const tooManyMessage = '@Html.Raw(Localizer["TooManyEmailsSelected"].Value)'.replace('{0}', totalSelected.toLocaleString()).replace('{1}', maxAsyncEmails.toLocaleString());
                        document.getElementById('confirmMessage').innerHTML = tooManyMessage;
                        var confirmModal = new bootstrap.Modal(document.getElementById('batchRestoreConfirmModal'));
                        document.getElementById('confirmBatchRestoreBtn').style.display = 'none';
                        confirmModal.show();
                        
                        // Hide modal after 5 seconds
                        setTimeout(function() {
                            confirmModal.hide();
                        }, 5000);
                        return;
                    }

                    // Show confirmation for large operations
                    if (totalSelected > asyncThreshold) {
                        // Show confirmation modal
                        const message = '@Html.Raw(Localizer["ContinueWithOperation"].Value)'.replace('{0}', totalSelected.toLocaleString());
                        document.getElementById('confirmMessage').innerHTML = message;
                        var confirmModal = new bootstrap.Modal(document.getElementById('batchRestoreConfirmModal'));
                        document.getElementById('confirmBatchRestoreBtn').style.display = 'inline-block';
                        
                        // Handle confirmation
                        document.getElementById('confirmBatchRestoreBtn').onclick = function() {
                            confirmModal.hide();
                            submitBatchRestoreForm(storedSelections);
                        };
                        
                        confirmModal.show();
                        return;
                    }
                    
                    // For small operations, proceed directly
                    submitBatchRestoreForm(storedSelections);
                });
            }

            // Export selected button
            const exportSelectedBtn = document.getElementById('exportSelectedBtn');
            if (exportSelectedBtn) {
                exportSelectedBtn.addEventListener('click', function() {
                    const totalSelected = getTotalSelectedCount();
                    const storedSelections = getStoredSelections();
                    
                    if (totalSelected === 0) {
                        // Show modal for no emails selected
                        document.getElementById('confirmMessage').innerHTML = '@Html.Raw(Localizer["PleaseSelectAtLeastOne"].Value)';
                        var confirmModal = new bootstrap.Modal(document.getElementById('batchRestoreConfirmModal'));
                        document.getElementById('confirmBatchRestoreBtn').style.display = 'none';
                        confirmModal.show();
                        
                        // Hide modal after 3 seconds
                        setTimeout(function() {
                            confirmModal.hide();
                        }, 3000);
                        return;
                    }

                    // Show export format selection modal
                    var exportFormatModal = new bootstrap.Modal(document.getElementById('exportFormatModal'));
                    exportFormatModal.show();
                    
                    // Store the selected IDs for later use
                    window.selectedEmailsForExport = storedSelections;
                });
            }

            // Export format confirmation button
            const confirmExportBtn = document.getElementById('confirmExportBtn');
            if (confirmExportBtn) {
                confirmExportBtn.addEventListener('click', function() {
                    const selectedFormat = document.querySelector('input[name="exportFormat"]:checked').value;
                    const selectedIds = window.selectedEmailsForExport;
                    
                    // Close the modal
                    var exportFormatModal = bootstrap.Modal.getInstance(document.getElementById('exportFormatModal'));
                    exportFormatModal.hide();
                    
                    // Submit export form with selected format
                    submitExportForm(selectedIds, selectedFormat);
                });
            }

            // Function to submit the batch restore form
            function submitBatchRestoreForm(selectedIds) {
                // Create a new form for POST request
                const form = document.createElement('form');
                form.method = 'post';
                form.action = '@Url.Action("BatchRestoreStart", "Emails")';
                
                // Add anti-forgery token
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                form.appendChild(tokenInput);

                // Add ReturnUrl
                const returnUrlInput = document.createElement('input');
                returnUrlInput.type = 'hidden';
                returnUrlInput.name = 'returnUrl';
                returnUrlInput.value = '@Context.Request.Path@Context.Request.QueryString';
                form.appendChild(returnUrlInput);

                // Add all selected IDs
                selectedIds.forEach(function(emailId) {
                    const idInput = document.createElement('input');
                    idInput.type = 'hidden';
                    idInput.name = 'ids';
                    idInput.value = emailId;
                    form.appendChild(idInput);
                });

                // Add form to body and submit
                document.body.appendChild(form);
                form.submit();
            }

            // Function to submit the export form
            function submitExportForm(selectedIds, selectedFormat) {
                // Create a new form for POST request
                const form = document.createElement('form');
                form.method = 'post';
                form.action = '@Url.Action("ExportSelected", "Emails")';
                
                // Add anti-forgery token
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                form.appendChild(tokenInput);

                // Add export format
                const formatInput = document.createElement('input');
                formatInput.type = 'hidden';
                formatInput.name = 'format';
                formatInput.value = selectedFormat;
                form.appendChild(formatInput);

                // Add ReturnUrl
                const returnUrlInput = document.createElement('input');
                returnUrlInput.type = 'hidden';
                returnUrlInput.name = 'returnUrl';
                returnUrlInput.value = '@Context.Request.Path@Context.Request.QueryString';
                form.appendChild(returnUrlInput);

                // Add all selected IDs
                selectedIds.forEach(function(emailId) {
                    const idInput = document.createElement('input');
                    idInput.type = 'hidden';
                    idInput.name = 'ids';
                    idInput.value = emailId;
                    form.appendChild(idInput);
                });

                // Add form to body and submit
                document.body.appendChild(form);
                form.submit();
            }

            // Initialize selection handlers when in selection mode
            @if (Model.ShowSelectionControls) {
                <text>
                initializeSelectionHandlers();
                </text>
            }
        });
    </script>
}
