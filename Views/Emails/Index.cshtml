@model MailArchiver.Models.ViewModels.SearchViewModel
@{
    ViewData["Title"] = "Email Archive";
}
<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3">Email Archive</h1>
        <button type="button" class="btn btn-success btn-sm d-none d-md-inline" data-bs-toggle="modal" data-bs-target="#exportModal">
            <i class="bi bi-download"></i> Export
        </button>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">Search</h6>
        </div>
        <div class="card-body">
            <form asp-action="Index" method="get" id="searchForm">
                <div class="row">
                    <div class="col-12 col-md-6 col-lg-4 mb-3">
                        <label asp-for="SearchTerm" class="form-label">Search Term</label>
                        <input asp-for="SearchTerm" class="form-control form-control-sm" placeholder="Subject, sender..." />
                    </div>
                    <div class="col-6 col-md-3 col-lg-2 mb-3">
                        <label asp-for="FromDate" class="form-label">From</label>
                        <input asp-for="FromDate" class="form-control form-control-sm" type="date" />
                    </div>
                    <div class="col-6 col-md-3 col-lg-2 mb-3">
                        <label asp-for="ToDate" class="form-label">To</label>
                        <input asp-for="ToDate" class="form-control form-control-sm" type="date" />
                    </div>
                    <div class="col-12 col-md-6 col-lg-2 mb-3">
                        <label asp-for="SelectedAccountId" class="form-label">Account</label>
                        <select asp-for="SelectedAccountId" asp-items="Model.AccountOptions" class="form-select form-select-sm"></select>
                    </div>
                    <div class="col-12 col-md-6 col-lg-2 mb-3">
                        <label asp-for="IsOutgoing" class="form-label">Direction</label>
                        <select asp-for="IsOutgoing" asp-items="Model.DirectionOptions" class="form-select form-select-sm"></select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex flex-column flex-md-row justify-content-between gap-2">
                            <div class="d-flex flex-wrap gap-2">
                                <button type="submit" class="btn btn-primary btn-sm">
                                    <i class="bi bi-search"></i> Search
                                </button>
                                <a asp-action="Index" class="btn btn-outline-secondary btn-sm">Reset</a>
                                <div class="form-check d-flex align-items-center ms-2">
                                    <input class="form-check-input me-2" type="checkbox" id="toggleSelectionMode" name="ShowSelectionControls" value="true"
                                           @(Model.ShowSelectionControls ? "checked" : "")>
                                    <label class="form-check-label small" for="toggleSelectionMode">Selection Mode</label>
                                </div>
                            </div>
                            <div class="d-md-none">
                                <button type="button" class="btn btn-success btn-sm w-100" data-bs-toggle="modal" data-bs-target="#exportModal">
                                    <i class="bi bi-download"></i> Export
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @if (Model.SearchResults != null && Model.SearchResults.Any())
    {
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                    <span class="small"><strong>@Model.TotalResults</strong> emails found</span>
                    <span class="small">Page @Model.PageNumber of @Model.TotalPages</span>
                </div>
            </div>
            
            @if (Model.ShowSelectionControls)
            {
                <div class="p-2 bg-light border-bottom">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start gap-2">
                        <div class="d-flex flex-wrap gap-2">
                            <button type="button" id="selectAllBtn" class="btn btn-sm btn-outline-primary">Select All</button>
                            <button type="button" id="deselectAllBtn" class="btn btn-sm btn-outline-secondary">Deselect All</button>
                            <span id="selectionCounter" class="badge bg-primary align-self-center">0 selected</span>
                        </div>
                        <div id="selectionActions" style="display:none;">
                            <button type="button" id="batchRestoreBtn" class="btn btn-sm btn-success">
                                <i class="bi bi-envelope-arrow-up"></i> 
                                <span class="d-none d-sm-inline">Copy Selected</span>
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Desktop Tabelle -->
            <div class="card-body p-0 d-none d-lg-block">
                <form id="batchActionsForm" method="get">
                    <input type="hidden" name="returnUrl" id="returnUrlInput" value="@Context.Request.Path@Context.Request.QueryString" />
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-dark">
                                <tr>
                                    @if (Model.ShowSelectionControls)
                                    {
                                        <th style="width: 50px;">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="selectAllCheckbox">
                                            </div>
                                        </th>
                                    }
                                    <th>Subject</th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Date</th>
                                    <th>Account</th>
                                    <th>Attachments</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var email in Model.SearchResults)
                                {
                                    <tr>
                                        @if (Model.ShowSelectionControls)
                                        {
                                            <td>
                                                <div class="form-check">
                                                    <input class="form-check-input email-select-checkbox" type="checkbox"
                                                           name="ids" value="@email.Id">
                                                </div>
                                            </td>
                                        }
                                        <td>
                                            @if (email.IsOutgoing)
                                            {
                                                <span class="badge bg-info">Out</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">In</span>
                                            }
                                            @email.Subject
                                        </td>
                                        <td>@email.From</td>
                                        <td>@email.To</td>
                                        <td>@email.SentDate.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>@email.MailAccount.Name</td>
                                        <td>
                                            @if (email.HasAttachments)
                                            {
                                                <i class="bi bi-paperclip text-warning"></i>
                                            }
                                        </td>
                                        <td>
                                            <a asp-action="Details" asp-route-id="@email.Id" class="btn btn-sm btn-outline-primary">Details</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </form>
            </div>

            <!-- Mobile Cards - Diese werden auf MobilgerÃ¤ten angezeigt -->
            <div class="d-lg-none p-3">
                <form id="batchActionsFormMobile" method="get">
                    <input type="hidden" name="returnUrl" id="returnUrlInputMobile" value="@Context.Request.Path@Context.Request.QueryString" />
                    @foreach (var email in Model.SearchResults)
                    {
                        <div class="email-card">
                            @if (Model.ShowSelectionControls)
                            {
                                <div class="form-check mb-2">
                                    <input class="form-check-input email-select-checkbox" type="checkbox"
                                           name="ids" value="@email.Id" id="email-@email.Id">
                                    <label class="form-check-label small text-muted" for="email-@email.Id">
                                        Select this email
                                    </label>
                                </div>
                            }
                            
                            <div class="email-card-header">
                                <div class="email-card-title">
                                    @if (email.IsOutgoing)
                                    {
                                        <i class="bi bi-arrow-up-right text-primary me-1"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-left text-success me-1"></i>
                                    }
                                    @email.Subject
                                    @if (email.HasAttachments)
                                    {
                                        <i class="bi bi-paperclip text-warning ms-1"></i>
                                    }
                                </div>
                            </div>
                            
                            <div class="email-card-meta">
                                <div><strong>From:</strong> @email.From</div>
                                <div><strong>To:</strong> @(email.To.Length > 50 ? email.To.Substring(0, 50) + "..." : email.To)</div>
                                <div><strong>Date:</strong> @email.SentDate.ToString("yyyy-MM-dd HH:mm")</div>
                                <div><strong>Account:</strong> @email.MailAccount.Name</div>
                            </div>
                            
                            <div class="email-card-actions">
                                <a asp-action="Details" asp-route-id="@email.Id" class="btn btn-outline-primary btn-sm w-100">
                                    <i class="bi bi-eye"></i> View Details
                                </a>
                            </div>
                        </div>
                    }
                </form>
            </div>

            <!-- Pagination -->
            <div class="card-footer">
                <nav>
                    <ul class="pagination pagination-sm justify-content-center mb-0">
                        @if (Model.PageNumber > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = Model.PageNumber - 1,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">Previous</a>
                            </li>
                        }
                        
                        @{
                            var startPage = Math.Max(1, Model.PageNumber - 1);
                            var endPage = Math.Min(Model.TotalPages, Model.PageNumber + 1);
                        }
                        
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = i,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">@i</a>
                            </li>
                        }
                        
                        @if (Model.PageNumber < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = Model.PageNumber + 1,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">Next</a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
    else if (Model.SearchResults != null)
    {
        <div class="text-center py-5">
            <div class="mb-3">
                <i class="bi bi-search display-1 text-muted"></i>
            </div>
            <h5 class="text-muted">No Emails Found</h5>
            <p class="text-muted">No emails were found for the specified search criteria.</p>
        </div>
    }
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportModalLabel">Export Search Results</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="ExportSearchResults" method="post">
                <div class="modal-body">
                    <input type="hidden" name="SearchTerm" value="@Model.SearchTerm" />
                    <input type="hidden" name="FromDate" value="@Model.FromDate?.ToString("yyyy-MM-dd")" />
                    <input type="hidden" name="ToDate" value="@Model.ToDate?.ToString("yyyy-MM-dd")" />
                    <input type="hidden" name="SelectedAccountId" value="@Model.SelectedAccountId" />
                    <input type="hidden" name="IsOutgoing" value="@Model.IsOutgoing" />
                    <div class="mb-3">
                        <label for="exportFormat" class="form-label">Export Format</label>
                        <select name="Format" id="exportFormat" class="form-select">
                            <option value="0">CSV (Excel)</option>
                            <option value="1">JSON (Data)</option>
                        </select>
                    </div>
                    <div class="alert alert-info">
                        <small>Export may take some time for large numbers of emails. The exported file will contain up to 10,000 emails.</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Export</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Email selection script initialized");
            
            // Get elements
            const toggleSelectionMode = document.getElementById('toggleSelectionMode');
            const searchForm = document.getElementById('searchForm');
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const selectAllBtn = document.getElementById('selectAllBtn');
            const deselectAllBtn = document.getElementById('deselectAllBtn');
            const selectionCounter = document.getElementById('selectionCounter');
            const selectionActions = document.getElementById('selectionActions');
            const batchRestoreBtn = document.getElementById('batchRestoreBtn');
            const batchActionsForm = document.getElementById('batchActionsForm');
            const batchActionsFormMobile = document.getElementById('batchActionsFormMobile');
            const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');

            console.log("Selection controls visible: " + @(Model.ShowSelectionControls ? "true" : "false"));
            console.log("Email checkboxes count: " + emailCheckboxes.length);

            // Toggle selection mode using form submit
            if (toggleSelectionMode) {
                toggleSelectionMode.addEventListener('change', function() {
                    console.log("Selection mode toggled: " + this.checked);
                    searchForm.submit();
                });
            }

            // Update selection counter and actions visibility
            function updateSelectionCounter() {
                const checkedBoxes = document.querySelectorAll('.email-select-checkbox:checked');
                const count = checkedBoxes.length;
                console.log("Selected emails count: " + count);
                
                if (selectionCounter) {
                    selectionCounter.textContent = count + ' selected';
                }

                // Show/hide batch actions
                if (selectionActions) {
                    if (count > 0) {
                        selectionActions.style.display = 'block';
                    } else {
                        selectionActions.style.display = 'none';
                    }
                }
            }

            // Initialize counter
            updateSelectionCounter();

            // Select/deselect all checkboxes
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    const isChecked = this.checked;
                    emailCheckboxes.forEach(function(checkbox) {
                        checkbox.checked = isChecked;
                    });
                    updateSelectionCounter();
                });
            }

            // Individual checkbox change
            emailCheckboxes.forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                    updateSelectionCounter();
                    if (selectAllCheckbox) {
                        const allChecked = document.querySelectorAll('.email-select-checkbox:not(:checked)').length === 0;
                        selectAllCheckbox.checked = allChecked && emailCheckboxes.length > 0;
                    }
                });
            });

            // Select all button
            if (selectAllBtn) {
                selectAllBtn.addEventListener('click', function() {
                    emailCheckboxes.forEach(function(checkbox) {
                        checkbox.checked = true;
                    });
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = true;
                    }
                    updateSelectionCounter();
                });
            }

            // Deselect all button
            if (deselectAllBtn) {
                deselectAllBtn.addEventListener('click', function() {
                    emailCheckboxes.forEach(function(checkbox) {
                        checkbox.checked = false;
                    });
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                    }
                    updateSelectionCounter();
                });
            }

            // Batch restore button
            if (batchRestoreBtn) {
                batchRestoreBtn.addEventListener('click', function() {
                    const checkedBoxes = document.querySelectorAll('.email-select-checkbox:checked');
                    if (checkedBoxes.length === 0) {
                        alert('Please select at least one email to copy.');
                        return;
                    }
                    
                    // Use mobile form on mobile devices, desktop form on desktop
                    const activeForm = window.innerWidth >= 992 ? batchActionsForm : batchActionsFormMobile;
                    if (activeForm) {
                        activeForm.action = '@Url.Action("BatchRestore")';
                        activeForm.submit();
                    }
                });
            }
        });
    </script>
}