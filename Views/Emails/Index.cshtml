@using Microsoft.AspNetCore.Http.Extensions
@model MailArchiver.Models.ViewModels.SearchViewModel
@{
    ViewData["Title"] = "Email Archive";
}

@* Anti-Forgery Token f√ºr JavaScript *@
@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3">Email Archive</h1>
        <button type="button" class="btn btn-success btn-sm d-none d-md-inline" data-bs-toggle="modal" data-bs-target="#exportModal">
            <i class="bi bi-download"></i> Export
        </button>
    </div>

    @* Active Jobs Alert *@
    @if (ViewBag.ActiveJobsCount != null && ViewBag.ActiveJobsCount > 0)
    {
        <div class="alert alert-info alert-dismissible fade show">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                <div>
                    <i class="bi bi-clock-history me-2"></i>
                    <strong>@ViewBag.ActiveJobsCount</strong> background job(s) are currently running.
                </div>
                <div>
                    <a asp-action="Jobs" class="btn btn-outline-primary btn-sm me-2">
                        <i class="bi bi-eye me-1"></i> View Jobs
                    </a>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">Search</h6>
        </div>
        <div class="card-body">
            <form asp-action="Index" method="get" id="searchForm">
                <div class="row">
                    <div class="col-12 col-md-6 col-lg-4 mb-3">
                        <label asp-for="SearchTerm" class="form-label">Search Term</label>
                        <input asp-for="SearchTerm" class="form-control form-control-sm" placeholder="Subject, sender..." />
                    </div>
                    <div class="col-6 col-md-3 col-lg-2 mb-3">
                        <label asp-for="FromDate" class="form-label">From</label>
                        <input asp-for="FromDate" class="form-control form-control-sm" type="date" />
                    </div>
                    <div class="col-6 col-md-3 col-lg-2 mb-3">
                        <label asp-for="ToDate" class="form-label">To</label>
                        <input asp-for="ToDate" class="form-control form-control-sm" type="date" />
                    </div>
                    <div class="col-12 col-md-6 col-lg-2 mb-3">
                        <label asp-for="SelectedAccountId" class="form-label">Account</label>
                        <select asp-for="SelectedAccountId" asp-items="Model.AccountOptions" class="form-select form-select-sm"></select>
                    </div>
                    <div class="col-12 col-md-6 col-lg-2 mb-3">
                        <label asp-for="IsOutgoing" class="form-label">Direction</label>
                        <select asp-for="IsOutgoing" asp-items="Model.DirectionOptions" class="form-select form-select-sm"></select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex flex-column flex-md-row justify-content-between gap-2">
                            <div class="d-flex flex-wrap gap-2">
                                <button type="submit" class="btn btn-primary btn-sm">
                                    <i class="bi bi-search"></i> Search
                                </button>
                                <a asp-action="Index" class="btn btn-outline-secondary btn-sm">Reset</a>
                                <div class="form-check d-flex align-items-center ms-2">
                                    <input class="form-check-input me-2" type="checkbox" id="toggleSelectionMode" name="ShowSelectionControls" value="true"
                                           @(Model.ShowSelectionControls ? "checked" : "")>
                                    <label class="form-check-label small" for="toggleSelectionMode">Selection Mode</label>
                                    <input type="hidden" id="userTimezone" name="UserTimezone" value="" />
                                </div>
                            </div>
                            <div class="d-md-none">
                                <button type="button" class="btn btn-success btn-sm w-100" data-bs-toggle="modal" data-bs-target="#exportModal">
                                    <i class="bi bi-download"></i> Export
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @* Batch Operation Information *@
    @if (Model.ShowSelectionControls)
    {
        <div class="card mb-4 border-info">
            <div class="card-header bg-light">
                <h6 class="mb-0 text-info">
                    <i class="bi bi-info-circle me-1"></i>Batch Operation Information
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12 col-lg-8">
                        <div class="row">
                            <div class="col-12 col-md-4 mb-2">
                                <small class="text-muted d-block">Direct Processing</small>
                                <strong class="text-success">1 - @ViewBag.AsyncThreshold emails</strong>
                                <small class="d-block text-muted">Process on this page (wait for completion)</small>
                            </div>
                            <div class="col-12 col-md-4 mb-2">
                                <small class="text-muted d-block">Background Job</small>
                                <strong class="text-primary">@(ViewBag.AsyncThreshold + 1) - @ViewBag.MaxAsyncEmails.ToString("N0") emails</strong>
                                <small class="d-block text-muted">Process in background (monitor separately)</small>
                            </div>
                            <div class="col-12 col-md-4 mb-2">
                                <small class="text-muted d-block">Maximum Limit</small>
                                <strong class="text-warning">@ViewBag.MaxAsyncEmails.ToString("N0") emails</strong>
                                <small class="d-block text-muted">Split larger operations into multiple batches</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-4">
                        <div class="d-flex flex-column gap-2">
                            @if (ViewBag.ActiveJobsCount != null && ViewBag.ActiveJobsCount > 0)
                            {
                                <div class="alert alert-warning mb-2 p-2">
                                    <small>
                                        <i class="bi bi-clock-history me-1"></i>
                                        <strong>@ViewBag.ActiveJobsCount active job(s)</strong> currently running
                                    </small>
                                </div>
                                <a asp-action="Jobs" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-eye me-1"></i>Monitor Background Jobs
                                </a>
                            }
                            else
                            {
                                <small class="text-muted">
                                    <i class="bi bi-check-circle me-1 text-success"></i>
                                    No background jobs currently running
                                </small>
                                <a asp-action="Jobs" class="btn btn-outline-secondary btn-sm">
                                    <i class="bi bi-clock-history me-1"></i>View Job History
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Model.SearchResults != null && Model.SearchResults.Any())
    {
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                    <span class="small"><strong>@Model.TotalResults</strong> emails found</span>
                    <span class="small">Page @Model.PageNumber of @Model.TotalPages</span>
                </div>
            </div>
            
            @if (Model.ShowSelectionControls)
            {
                <div class="p-2 bg-light border-bottom">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start gap-2">
                        <div class="d-flex flex-wrap gap-2 align-items-center">
                            <button type="button" id="selectAllBtn" class="btn btn-sm btn-outline-primary">Select All</button>
                            <button type="button" id="deselectAllBtn" class="btn btn-sm btn-outline-secondary">Deselect All</button>
                            <span id="selectionCounter" class="badge bg-primary">0 selected</span>
                            <span id="operationMode" class="badge bg-info" style="display:none;"></span>
                        </div>
                        <div id="selectionActions" style="display:none;">
                            <button type="button" id="batchRestoreBtn" class="btn btn-sm btn-success">
                                <i class="bi bi-envelope-arrow-up"></i>
                                <span class="d-none d-sm-inline">Copy Selected</span>
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Desktop Tabelle -->
            <div class="card-body p-0 d-none d-lg-block">
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-dark">
                            <tr>
                                @if (Model.ShowSelectionControls)
                                {
                                    <th style="width: 50px;">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="selectAllCheckbox">
                                        </div>
                                    </th>
                                }
                                <th>Subject</th>
                                <th>From</th>
                                <th>To</th>
                                <th>Date</th>
                                <th>Account</th>
                                <th>Attachments</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var email in Model.SearchResults)
                            {
                                <tr>
                                    @if (Model.ShowSelectionControls)
                                    {
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input email-select-checkbox" type="checkbox"
                                                       name="ids" value="@email.Id">
                                            </div>
                                        </td>
                                    }
                                    <td>
                                        @if (email.IsOutgoing)
                                        {
                                            <span class="badge bg-info">Out</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">In</span>
                                        }
                                        @email.Subject
                                    </td>
                                    <td>@email.From</td>
                                    <td>@email.To</td>
                                    <td>@email.SentDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@email.MailAccount.Name</td>
                                    <td>
                                        @if (email.HasAttachments)
                                        {
                                            <i class="bi bi-paperclip text-warning"></i>
                                        }
                                    </td>
                                    <td>
                                        <a asp-action="Details" 
                                        asp-route-id="@email.Id" 
                                        asp-route-returnUrl="@Context.Request.GetDisplayUrl()" 
                                        class="btn btn-sm btn-outline-primary">Details</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Mobile Cards - Diese werden auf Mobilger√§ten UND Tablets angezeigt -->
            <div class="d-lg-none p-3">
                @foreach (var email in Model.SearchResults)
                {
                    <div class="card mb-3 email-card-mobile">
                        @if (Model.ShowSelectionControls)
                        {
                            <div class="form-check mb-2">
                                <input class="form-check-input email-select-checkbox" type="checkbox"
                                       name="ids" value="@email.Id" id="email-mobile-@email.Id">
                                <label class="form-check-label small text-muted" for="email-mobile-@email.Id">
                                    Select this email
                                </label>
                            </div>
                        }
                        <div class="card-body p-3">
                            <div class="email-card-header">
                                <div class="email-card-title">
                                    @if (email.IsOutgoing)
                                    {
                                        <i class="bi bi-arrow-up-right text-primary me-1"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-down-left text-success me-1"></i>
                                    }
                                    @email.Subject
                                    @if (email.HasAttachments)
                                    {
                                        <i class="bi bi-paperclip text-warning ms-1"></i>
                                    }
                                </div>
                            </div>
                            <div class="email-card-meta">
                                <div><strong>From:</strong> @email.From</div>
                                <div><strong>To:</strong> @(email.To.Length > 50 ? email.To.Substring(0, 50) + "..." : email.To)</div>
                                <div><strong>Date:</strong> @email.SentDate.ToString("yyyy-MM-dd HH:mm")</div>
                                <div><strong>Account:</strong> @email.MailAccount.Name</div>
                            </div>
                            <div class="email-card-actions">
                                <a asp-action="Details" 
                                asp-route-id="@email.Id" 
                                asp-route-returnUrl="@Context.Request.GetDisplayUrl()" 
                                class="btn btn-outline-primary btn-sm w-100">
                                    <i class="bi bi-eye"></i> View Details
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            <div class="card-footer">
                <nav>
                    <ul class="pagination pagination-sm justify-content-center mb-0">
                        @if (Model.PageNumber > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = Model.PageNumber - 1,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">Previous</a>
                            </li>
                        }
                        @{
                            var startPage = Math.Max(1, Model.PageNumber - 1);
                            var endPage = Math.Min(Model.TotalPages, Model.PageNumber + 1);
                        }
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = i,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">@i</a>
                            </li>
                        }
                        @if (Model.PageNumber < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new {
                                    SearchTerm = Model.SearchTerm,
                                    FromDate = Model.FromDate?.ToString("yyyy-MM-dd"),
                                    ToDate = Model.ToDate?.ToString("yyyy-MM-dd"),
                                    SelectedAccountId = Model.SelectedAccountId,
                                    IsOutgoing = Model.IsOutgoing,
                                    PageNumber = Model.PageNumber + 1,
                                    PageSize = Model.PageSize,
                                    ShowSelectionControls = Model.ShowSelectionControls
                                })">Next</a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    }
    else if (Model.SearchResults != null)
    {
        <div class="text-center py-5">
            <div class="mb-3">
                <i class="bi bi-search display-1 text-muted"></i>
            </div>
            <h5 class="text-muted">No Emails Found</h5>
            <p class="text-muted">No emails were found for the specified search criteria.</p>
        </div>
    }
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportModalLabel">Export Search Results</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="ExportSearchResults" method="post">
                <div class="modal-body">
                    <!-- Alle aktuellen Suchparameter als hidden fields -->
                    <input type="hidden" name="SearchTerm" value="@(Model.SearchTerm ?? "")" />
                    <input type="hidden" name="FromDate" value="@(Model.FromDate?.ToString("yyyy-MM-dd"))" />
                    <input type="hidden" name="ToDate" value="@(Model.ToDate?.ToString("yyyy-MM-dd"))" />
                    <input type="hidden" name="SelectedAccountId" value="@Model.SelectedAccountId" />
                    <input type="hidden" name="IsOutgoing" value="@Model.IsOutgoing" />
                    
                    <div class="mb-3">
                        <label for="exportFormat" class="form-label">Export Format</label>
                        <select name="Format" id="exportFormat" class="form-select">
                            <option value="0">CSV</option>
                            <option value="1">JSON</option>
                        </select>
                    </div>
                    
                    <div class="alert alert-info">
                        <small>
                            <strong>Export Information:</strong><br>
                            @if (!string.IsNullOrEmpty(Model.SearchTerm) || Model.FromDate.HasValue || Model.ToDate.HasValue || Model.SelectedAccountId.HasValue || Model.IsOutgoing.HasValue)
                            {
                                <span>Exporting filtered results based on your current search criteria.</span>
                            }
                            else
                            {
                                <span>Exporting all emails from your archive.</span>
                            }
                            <br>Export may take some time for large numbers of emails. The exported file will contain up to 10,000 emails.
                        </small>
                    </div>
                    
                    @if (Model.TotalResults > 0)
                    {
                        <div class="alert alert-success">
                            <small>
                                <i class="bi bi-info-circle me-1"></i>
                                <strong>@Model.TotalResults.ToString("N0")</strong> emails match your current criteria and will be exported.
                            </small>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-download me-1"></i>Export
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Email selection script initialized");
            const timezoneInput = document.getElementById('userTimezone');
            if (timezoneInput) {
                timezoneInput.value = Intl.DateTimeFormat().resolvedOptions().timeZone;
            }

            // Configuration from ViewBag
            const asyncThreshold = @ViewBag.AsyncThreshold;
            const maxAsyncEmails = @ViewBag.MaxAsyncEmails;
            
            // Get elements
            const toggleSelectionMode = document.getElementById('toggleSelectionMode');
            const searchForm = document.getElementById('searchForm');
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const selectAllBtn = document.getElementById('selectAllBtn');
            const deselectAllBtn = document.getElementById('deselectAllBtn');
            const selectionCounter = document.getElementById('selectionCounter');
            const selectionActions = document.getElementById('selectionActions');
            const batchRestoreBtn = document.getElementById('batchRestoreBtn');
            const operationMode = document.getElementById('operationMode');

            console.log("Selection controls visible: " + @(Model.ShowSelectionControls ? "true" : "false"));

            // Toggle selection mode using form submit
            if (toggleSelectionMode) {
                toggleSelectionMode.addEventListener('change', function() {
                    console.log("Selection mode toggled: " + this.checked);
                    searchForm.submit();
                });
            }

            // Update selection counter and mode indicator
            function updateSelectionCounter() {
                const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                const checkedBoxes = document.querySelectorAll('.email-select-checkbox:checked');
                const count = checkedBoxes.length;
                
                console.log("Selected emails count: " + count);
                
                if (selectionCounter) {
                    selectionCounter.textContent = count + ' selected';
                }

                // Update operation mode indicator
                if (operationMode && count > 0) {
                    operationMode.style.display = 'inline';
                    if (count <= asyncThreshold) {
                        operationMode.textContent = 'Direct Processing';
                        operationMode.className = 'badge bg-success';
                    } else if (count <= maxAsyncEmails) {
                        operationMode.textContent = 'Background Job';
                        operationMode.className = 'badge bg-primary';
                    } else {
                        operationMode.textContent = 'Too Many - Split Required';
                        operationMode.className = 'badge bg-danger';
                    }
                } else if (operationMode) {
                    operationMode.style.display = 'none';
                }

                // Show/hide batch actions
                if (selectionActions) {
                    if (count > 0) {
                        selectionActions.style.display = 'block';
                        
                        // Update button state based on count
                        if (batchRestoreBtn) {
                            if (count > maxAsyncEmails) {
                                batchRestoreBtn.disabled = true;
                                batchRestoreBtn.innerHTML = '<i class="bi bi-exclamation-triangle"></i> <span class="d-none d-sm-inline">Too Many Selected</span>';
                                batchRestoreBtn.className = 'btn btn-sm btn-danger';
                            } else {
                                batchRestoreBtn.disabled = false;
                                batchRestoreBtn.innerHTML = '<i class="bi bi-envelope-arrow-up"></i> <span class="d-none d-sm-inline">Copy Selected</span>';
                                batchRestoreBtn.className = 'btn btn-sm btn-success';
                            }
                        }
                    } else {
                        selectionActions.style.display = 'none';
                    }
                }

                // Update select all checkbox state
                if (selectAllCheckbox && emailCheckboxes.length > 0) {
                    selectAllCheckbox.checked = checkedBoxes.length === emailCheckboxes.length;
                    selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < emailCheckboxes.length;
                }
            }

            // Initialize counter and attach events
            function initializeSelectionHandlers() {
                const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                console.log("Found email checkboxes: " + emailCheckboxes.length);

                // Individual checkbox change
                emailCheckboxes.forEach(function(checkbox) {
                    checkbox.addEventListener('change', function() {
                        updateSelectionCounter();
                    });
                });

                updateSelectionCounter();
            }

            // Select/deselect all checkboxes
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    const isChecked = this.checked;
                    const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                    emailCheckboxes.forEach(function(checkbox) {
                        checkbox.checked = isChecked;
                    });
                    updateSelectionCounter();
                });
            }

            // Select all button
            if (selectAllBtn) {
                selectAllBtn.addEventListener('click', function() {
                    const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                    emailCheckboxes.forEach(function(checkbox) {
                        checkbox.checked = true;
                    });
                    updateSelectionCounter();
                });
            }

            // Deselect all button
            if (deselectAllBtn) {
                deselectAllBtn.addEventListener('click', function() {
                    const emailCheckboxes = document.querySelectorAll('.email-select-checkbox');
                    emailCheckboxes.forEach(function(checkbox) {
                        checkbox.checked = false;
                    });
                    updateSelectionCounter();
                });
            }

            // Batch restore button
            if (batchRestoreBtn) {
                batchRestoreBtn.addEventListener('click', function() {
                    if (this.disabled) {
                        return;
                    }

                    const checkedBoxes = document.querySelectorAll('.email-select-checkbox:checked');
                    if (checkedBoxes.length === 0) {
                        alert('Please select at least one email to copy.');
                        return;
                    }

                    if (checkedBoxes.length > maxAsyncEmails) {
                        alert('Too many emails selected (' + checkedBoxes.length.toLocaleString() + '). Maximum allowed is ' + maxAsyncEmails.toLocaleString() + ' emails. Please reduce your selection or split into multiple operations.');
                        return;
                    }

                    // Show confirmation for large operations
                    if (checkedBoxes.length > asyncThreshold) {
                        const confirmed = confirm(
                            'You have selected ' + checkedBoxes.length.toLocaleString() + ' emails.\n' +
                            'This will be processed as a background job that you can monitor separately.\n\n' +
                            'Continue with this operation?'
                        );
                        if (!confirmed) {
                            return;
                        }
                    }

                    // Erstelle ein neues Form f√ºr POST-Request
                    const form = document.createElement('form');
                    form.method = 'post';
                    form.action = '@Url.Action("BatchRestoreStart", "Emails")';
                    
                    // Anti-forgery token hinzuf√ºgen
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    form.appendChild(tokenInput);

                    // ReturnUrl hinzuf√ºgen
                    const returnUrlInput = document.createElement('input');
                    returnUrlInput.type = 'hidden';
                    returnUrlInput.name = 'returnUrl';
                    returnUrlInput.value = '@Context.Request.Path@Context.Request.QueryString';
                    form.appendChild(returnUrlInput);

                    // Alle ausgew√§hlten IDs hinzuf√ºgen
                    checkedBoxes.forEach(function(checkbox) {
                        const idInput = document.createElement('input');
                        idInput.type = 'hidden';
                        idInput.name = 'ids';
                        idInput.value = checkbox.value;
                        form.appendChild(idInput);
                    });

                    // Form zum Body hinzuf√ºgen und absenden
                    document.body.appendChild(form);
                    form.submit();
                });
            }

            // Initialize handlers after DOM is ready
            initializeSelectionHandlers();
        });
    </script>
}