@using MailArchiver.Models.ViewModels
@inject Microsoft.Extensions.Localization.IStringLocalizer<MailArchiver.SharedResource> Localizer
@model MailArchiver.Models.ViewModels.MailAccountViewModel
@{
    ViewData["Title"] = Localizer["DeleteEmailAccountTitle"];
    var emailCount = ViewBag.EmailCount ?? 0;
}
<div class="container">
    <h1 class="text-danger">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @Localizer["DeleteEmailAccountTitle"]
    </h1>

    <div class="alert alert-danger">
        <h4>⚠ @Localizer["PermanentDeletionWarning"]</h4>
        <p><strong>@Localizer["AboutToDeleteAccountAllEmails"]</strong></p>

        <div class="row mt-3">
            <div class="col-md-6">
                <h6>@Localizer["WhatWillBeDeleted"]</h6>
                <ul class="mb-0">
                    <li>@Localizer["DeleteItemAccountConfig"]</li>
                    <li>@string.Format(Localizer["DeleteItemAllArchivedEmails"], emailCount.ToString("N0"))</li>
                    <li>@Localizer["DeleteItemAllAttachments"]</li>
                    <li>@Localizer["DeleteItemSyncHistory"]</li>
                </ul>
            </div>
            <div class="col-md-6">
                <h6>@Localizer["ThisAction"]</h6>
                <ul class="mb-0">
                    <li><strong>@Localizer["ActionCannotBeUndone"]</strong></li>
                    <li><strong>@Localizer["ActionCannotBeRecovered"]</strong></li>
                    <li>@Localizer["ActionWillFreeStorage"]</li>
                    <li>@Localizer["ActionWillStopSync"]</li>
                </ul>
            </div>
        </div>

        <div class="mt-3 p-2 bg-white rounded border">
            <small class="text-muted">
                <strong>@Localizer["Alternative"]</strong> @Localizer["AlternativeDisableInfo"]
                <a asp-action="Edit" asp-route-id="@Model.Id"
                    class="text-decoration-none">@Localizer["DisableAccountInsteadLink"]</a>.
            </small>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-light">
            <h5 class="mb-0">@Localizer["AccountToBeDeleted"]</h5>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">@Localizer["Name"]</dt>
                <dd class="col-sm-9"><strong>@Model.Name</strong></dd>
                <dt class="col-sm-3">@Localizer["EmailAddress"]</dt>
                <dd class="col-sm-9"><strong>@Model.EmailAddress</strong></dd>
                <dt class="col-sm-3">@Localizer["Status"]</dt>
                <dd class="col-sm-9">
                    @if (Model.IsEnabled)
                    {
                        <span class="badge bg-success">@Localizer["Active"]</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">@Localizer["Inactive"]</span>
                    }
                </dd>
                <dt class="col-sm-3">@Localizer["ArchivedEmails"]</dt>
                <dd class="col-sm-9">
                    <span class="badge bg-danger fs-6">@string.Format(Localizer["ArchivedEmailsWillBeDeleted"],
                                                emailCount.ToString("N0"))</span>
                </dd>
            </dl>
        </div>
    </div>

    <!-- Confirmation Form -->
    <div class="card mt-4 border-danger">
        <div class="card-header bg-danger text-white">
            <h5 class="mb-0">@Localizer["FinalConfirmation"]</h5>
        </div>
        <div class="card-body">
            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" id="confirmDeletion" required>
                <label class="form-check-label" for="confirmDeletion">
                    <strong>@string.Format(Localizer["UnderstandDeletionAcknowledge"], Model.Name,
                                                emailCount.ToString("N0"))</strong>
                </label>
            </div>

<div class="d-flex gap-3 justify-content-between flex-column flex-md-row">
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal"
                        data-bs-target="#cancelModal">
                        <i class="bi bi-arrow-left"></i> @Localizer["CancelKeepAccount"]
                    </button>

                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                        <i class="bi bi-pause"></i> @Localizer["DisableInstead"]
                    </a>
                </div>

                <button type="button" class="btn btn-danger" id="deleteButton" disabled data-bs-toggle="modal"
                    data-bs-target="#deleteConfirmationModal">
                    <i class="bi bi-trash-fill"></i>
                    @string.Format(Localizer["PermanentlyDeleteAccountAndEmails"], emailCount.ToString("N0"))
                </button>
            </div>
            
            <form asp-action="Delete" asp-route-id="@Model.Id" method="post" id="deleteForm">
                @Html.AntiForgeryToken()
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const confirmCheckbox = document.getElementById('confirmDeletion');
            const deleteButton = document.getElementById('deleteButton');
const deleteForm = document.getElementById('deleteForm');
            if (!deleteForm) {
                console.error('Delete form not found');
            }

            // Enable/disable delete button based on checkbox
            confirmCheckbox.addEventListener('change', function () {
                deleteButton.disabled = !this.checked;
            });

// Handle delete confirmation modal
            document.getElementById('deleteConfirmationModal-Confirm').addEventListener('click', function () {
                // Submit the form when the modal confirm button is clicked
                if (deleteForm) {
                    deleteForm.submit();
                } else {
                    console.error('Delete form not found');
                }
            });

            // Handle cancel modal
            document.getElementById('cancelModal-Confirm').addEventListener('click', function () {
                window.location.href = '@Url.Action("Index", "MailAccounts")';
            });
        });
    </script>

    @{
        var cancelModal = new ModalViewModel
        {
            Id = "cancelModal",
            Title = Localizer["CancelKeepAccount"].ToString(),
            Message = Localizer["CancelKeepAccountMessage"].ToString(),
            ConfirmButtonText = Localizer["YesCancel"].ToString(),
            ConfirmButtonClass = "btn-secondary",
            CancelButtonText = Localizer["Cancel"].ToString()
        };

        var deleteModal = new ModalViewModel
        {
            Id = "deleteConfirmationModal",
            Title = Localizer["FinalWarningTitle"].ToString(),
            Message = Localizer["YouAreAboutToDelete"].ToString(),
            IncludeList = true,
            ListTitle1 = Localizer["WhatWillBeDeleted"].ToString(),
            ListItems1 = new List<string> {
string.Format(Localizer["BulletAccount"].ToString(), Model.Name),
string.Format(Localizer["BulletArchivedEmails"].ToString(), emailCount.ToString("N0")),
Localizer["BulletAllAttachments"].ToString()
},
            ListTitle2 = Localizer["ThisAction"].ToString(),
            ListItems2 = new List<string> {
Localizer["ActionCannotBeUndone"].ToString(),
Localizer["ActionCannotBeRecovered"].ToString(),
Localizer["ActionWillFreeStorage"].ToString(),
Localizer["ActionWillStopSync"].ToString()
},
            ShowWarning = true,
            WarningMessage = Localizer["DeletionCannotBeUndone"].ToString(),
            ConfirmButtonText = string.Format(Localizer["PermanentlyDeleteAccountAndEmails"].ToString(), emailCount.ToString("N0")),
            ConfirmButtonClass = "btn-danger",
            CancelButtonText = Localizer["Cancel"].ToString()
        };
    }

    @await Html.PartialAsync("_ModalTemplate", cancelModal)
    @await Html.PartialAsync("_ModalTemplate", deleteModal)
}
