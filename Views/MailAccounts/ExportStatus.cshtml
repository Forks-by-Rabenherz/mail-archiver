@model MailArchiver.Models.AccountExportJob
@inject Microsoft.Extensions.Localization.IStringLocalizer<MailArchiver.SharedResource> Localizer

@{
    ViewData["Title"] = @Localizer["ExportStatus"];
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">@Localizer["ExportStatus"]: @Model.MailAccountName</h3>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <dl class="row">
                                <dt class="col-sm-4">@Localizer["JobID"]:</dt>
                                <dd class="col-sm-8"><code>@Model.JobId</code></dd>
                                
                                <dt class="col-sm-4">@Localizer["Format"]:</dt>
                                <dd class="col-sm-8">
                                    @if (Model.Format == MailArchiver.Models.AccountExportFormat.EML)
                                    {
                                        <span class="badge bg-info">@Localizer["EMLFormat"]</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">@Localizer["MBoxFormat"]</span>
                                    }
                                </dd>
                                
                                <dt class="col-sm-4">@Localizer["Status"]:</dt>
                                <dd class="col-sm-8">
                                    @switch (Model.Status)
                                    {
                                        case MailArchiver.Models.AccountExportJobStatus.Queued:
                                            <span class="badge bg-secondary">@Localizer["Queued"]</span>
                                            break;
                                        case MailArchiver.Models.AccountExportJobStatus.Running:
                                            <span class="badge bg-primary">@Localizer["Running"]</span>
                                            break;
                                        case MailArchiver.Models.AccountExportJobStatus.Completed:
                                            <span class="badge bg-success">@Localizer["Completed"]</span>
                                            break;
                                        case MailArchiver.Models.AccountExportJobStatus.Failed:
                                            <span class="badge bg-danger">@Localizer["Failed"]</span>
                                            break;
                                        case MailArchiver.Models.AccountExportJobStatus.Cancelled:
                                            <span class="badge bg-warning">@Localizer["Cancelled"]</span>
                                            break;
                                        case MailArchiver.Models.AccountExportJobStatus.Downloaded:
                                            <span class="badge bg-info">@Localizer["Downloaded"]</span>
                                            break;
                                    }
                                </dd>
                                
                                <dt class="col-sm-4">@Localizer["Created"]:</dt>
                                <dd class="col-sm-8">
                                    <span class="utc-timestamp" data-utc-time="@Model.Created.ToString("yyyy-MM-ddTHH:mm:ss")">
                                        @Model.Created.ToString("g")
                                    </span>
                                </dd>
                                
                                @if (Model.Started.HasValue)
                                {
                                    <dt class="col-sm-4">@Localizer["Started"]:</dt>
                                    <dd class="col-sm-8">
                                        <span class="utc-timestamp" data-utc-time="@Model.Started.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                            @Model.Started.Value.ToString("g")
                                        </span>
                                    </dd>
                                }
                                
                                @if (Model.Completed.HasValue)
                                {
                                    <dt class="col-sm-4">@Localizer["Completed"]:</dt>
                                    <dd class="col-sm-8">
                                        <span class="utc-timestamp" data-utc-time="@Model.Completed.Value.ToString("yyyy-MM-ddTHH:mm:ss")">
                                            @Model.Completed.Value.ToString("g")
                                        </span>
                                    </dd>
                                }
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <dl class="row">
                                <dt class="col-sm-5">@Localizer["TotalEmails"]:</dt>
                                <dd class="col-sm-7">@Model.TotalEmails.ToString("N0")</dd>
                                
                                <dt class="col-sm-5">@Localizer["ProcessedEmails"]:</dt>
                                <dd class="col-sm-7">@Model.ProcessedEmails.ToString("N0")</dd>
                                
                                <dt class="col-sm-5">@Localizer["IncomingEmails"]:</dt>
                                <dd class="col-sm-7">@Model.IncomingEmailsCount.ToString("N0")</dd>
                                
                                <dt class="col-sm-5">@Localizer["OutgoingEmails"]:</dt>
                                <dd class="col-sm-7">@Model.OutgoingEmailsCount.ToString("N0")</dd>
                                
                                @if (Model.OutputFileSize > 0)
                                {
                                    <dt class="col-sm-5">@Localizer["FileSize"]:</dt>
                                    <dd class="col-sm-7">@((Model.OutputFileSize / (1024.0 * 1024.0)).ToString("F2")) MB</dd>
                                }
                            </dl>
                        </div>
                    </div>

                    @if (Model.Status == MailArchiver.Models.AccountExportJobStatus.Running)
                    {
                        <div class="row mb-4">
                            <div class="col-12">
                                <h5>@Localizer["Progress"]</h5>
                                @{
                                    var progressPercent = Model.TotalEmails > 0 ? (Model.ProcessedEmails * 100.0 / Model.TotalEmails) : 0;
                                }
                                <div class="progress mb-2">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         role="progressbar" 
                                         style="width: @progressPercent.ToString("F1")%" 
                                         aria-valuenow="@progressPercent.ToString("F1")" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @progressPercent.ToString("F1")%
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(Model.CurrentEmailSubject))
                                {
                                    <small class="text-muted">@Localizer["CurrentEmail"]: @Model.CurrentEmailSubject</small>
                                }
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger">
                            <h6><i class="bi bi-exclamation-triangle"></i> @Localizer["Error"]</h6>
                            <p class="mb-0">@Model.ErrorMessage</p>
                        </div>
                    }

                    <div class="d-flex justify-content-between">
                        <a href="@Url.Action("Index")" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> @Localizer["BackToAccounts"]
                        </a>
                        
                        <div class="d-flex gap-2">
                            @if (Model.Status == MailArchiver.Models.AccountExportJobStatus.Queued || Model.Status == MailArchiver.Models.AccountExportJobStatus.Running)
                            {
                                <form asp-action="CancelExport" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="jobId" value="@Model.JobId" />
                                    <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                                    <button type="submit" class="btn btn-warning" onclick="return confirm('@Localizer["ConfirmCancelExport"]')">
                                        <i class="bi bi-x-circle"></i> @Localizer["Cancel"]
                                    </button>
                                </form>
                            }
                            
                            @if (Model.Status == MailArchiver.Models.AccountExportJobStatus.Completed)
                            {
                                <a href="@Url.Action("DownloadExport", new { jobId = Model.JobId })" class="btn btn-success">
                                    <i class="bi bi-download"></i> @Localizer["DownloadExport"]
                                </a>
                            }
                            
                            <button type="button" class="btn btn-outline-primary" onclick="location.reload()">
                                <i class="bi bi-arrow-clockwise"></i> @Localizer["Refresh"]
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-refresh if the job is still running
            @if (Model.Status == MailArchiver.Models.AccountExportJobStatus.Queued || Model.Status == MailArchiver.Models.AccountExportJobStatus.Running)
            {
                <text>
                setTimeout(function() {
                    location.reload();
                }, 5000); // Refresh every 5 seconds
                </text>
            }
            else if (Model.Status == MailArchiver.Models.AccountExportJobStatus.Completed)
            {
                <text>
                // Show success notification
                if (typeof window.showNotification === 'function') {
                    window.showNotification('@Localizer["ExportCompleted"]', 'success');
                }
                </text>
            }
        });
    </script>
}
