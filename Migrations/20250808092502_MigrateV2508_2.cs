using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MailArchiver.Migrations
{
    /// <inheritdoc />
    public partial class MigrateV2508_2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // Ensure schema exists
            migrationBuilder.EnsureSchema("mail_archiver");

            // Ensure __EFMigrationsHistory table exists in default schema
            migrationBuilder.Sql(@"
                CREATE TABLE IF NOT EXISTS ""__EFMigrationsHistory"" (
                    ""MigrationId"" character varying(150) NOT NULL,
                    ""ProductVersion"" character varying(32) NOT NULL,
                    CONSTRAINT ""PK___EFMigrationsHistory"" PRIMARY KEY (""MigrationId"")
                );
            ");

            // Check and create MailAccounts table if it doesn't exist
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                                   WHERE table_schema = 'mail_archiver' 
                                   AND table_name = 'MailAccounts') THEN
                        CREATE TABLE mail_archiver.""MailAccounts"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""Name"" text NOT NULL,
                            ""EmailAddress"" text NOT NULL,
                            ""ImapServer"" text NOT NULL,
                            ""ImapPort"" integer NOT NULL,
                            ""Username"" text NOT NULL,
                            ""Password"" text NOT NULL,
                            ""UseSSL"" boolean NOT NULL,
                            ""LastSync"" timestamp without time zone NOT NULL,
                            ""IsEnabled"" boolean NOT NULL,
                            ""ExcludedFolders"" text NOT NULL DEFAULT '',
                            CONSTRAINT ""PK_MailAccounts"" PRIMARY KEY (""Id"")
                        );
                    END IF;
                END $$;
            ");

            // Add ExcludedFolders column if it doesn't exist (for legacy systems)
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                                   WHERE table_schema = 'mail_archiver' 
                                   AND table_name = 'MailAccounts' 
                                   AND column_name = 'ExcludedFolders') THEN
                        ALTER TABLE mail_archiver.""MailAccounts"" 
                        ADD COLUMN ""ExcludedFolders"" text NOT NULL DEFAULT '';
                    END IF;
                END $$;
            ");

            // Check and create Users table if it doesn't exist
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                                   WHERE table_schema = 'mail_archiver' 
                                   AND table_name = 'Users') THEN
                        CREATE TABLE mail_archiver.""Users"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""Username"" character varying(50) NOT NULL,
                            ""Email"" character varying(100) NOT NULL,
                            ""PasswordHash"" text NOT NULL,
                            ""IsAdmin"" boolean NOT NULL,
                            ""IsActive"" boolean NOT NULL,
                            ""CreatedAt"" timestamp without time zone NOT NULL,
                            ""LastLoginAt"" timestamp without time zone,
                            CONSTRAINT ""PK_Users"" PRIMARY KEY (""Id"")
                        );
                        
                        CREATE UNIQUE INDEX ""IX_Users_Username"" ON mail_archiver.""Users"" (""Username"");
                        CREATE UNIQUE INDEX ""IX_Users_Email"" ON mail_archiver.""Users"" (""Email"");
                    END IF;
                END $$;
            ");

            // Check and create ArchivedEmails table if it doesn't exist
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                                   WHERE table_schema = 'mail_archiver' 
                                   AND table_name = 'ArchivedEmails') THEN
                        CREATE TABLE mail_archiver.""ArchivedEmails"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""MailAccountId"" integer NOT NULL,
                            ""MessageId"" text NOT NULL,
                            ""Subject"" text NOT NULL,
                            ""Body"" text NOT NULL,
                            ""HtmlBody"" text NOT NULL,
                            ""From"" text NOT NULL,
                            ""To"" text NOT NULL,
                            ""Cc"" text NOT NULL,
                            ""Bcc"" text NOT NULL,
                            ""SentDate"" timestamp without time zone NOT NULL,
                            ""ReceivedDate"" timestamp without time zone NOT NULL,
                            ""IsOutgoing"" boolean NOT NULL,
                            ""HasAttachments"" boolean NOT NULL,
                            ""FolderName"" text NOT NULL,
                            CONSTRAINT ""PK_ArchivedEmails"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_ArchivedEmails_MailAccounts_MailAccountId"" 
                                FOREIGN KEY (""MailAccountId"") 
                                REFERENCES mail_archiver.""MailAccounts"" (""Id"") 
                                ON DELETE CASCADE
                        );
                        
                        CREATE INDEX ""IX_ArchivedEmails_MailAccountId"" ON mail_archiver.""ArchivedEmails"" (""MailAccountId"");
                        CREATE INDEX ""IX_ArchivedEmails_SentDate"" ON mail_archiver.""ArchivedEmails"" (""SentDate"");
                    END IF;
                END $$;
            ");

            // Check and create UserMailAccounts table if it doesn't exist
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                                   WHERE table_schema = 'mail_archiver' 
                                   AND table_name = 'UserMailAccounts') THEN
                        CREATE TABLE mail_archiver.""UserMailAccounts"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""UserId"" integer NOT NULL,
                            ""MailAccountId"" integer NOT NULL,
                            CONSTRAINT ""PK_UserMailAccounts"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_UserMailAccounts_MailAccounts_MailAccountId"" 
                                FOREIGN KEY (""MailAccountId"") 
                                REFERENCES mail_archiver.""MailAccounts"" (""Id"") 
                                ON DELETE CASCADE,
                            CONSTRAINT ""FK_UserMailAccounts_Users_UserId"" 
                                FOREIGN KEY (""UserId"") 
                                REFERENCES mail_archiver.""Users"" (""Id"") 
                                ON DELETE CASCADE
                        );
                        
                        CREATE INDEX ""IX_UserMailAccounts_MailAccountId"" ON mail_archiver.""UserMailAccounts"" (""MailAccountId"");
                        CREATE UNIQUE INDEX ""IX_UserMailAccounts_UserId_MailAccountId"" ON mail_archiver.""UserMailAccounts"" (""UserId"", ""MailAccountId"");
                    END IF;
                END $$;
            ");

            // Check and create EmailAttachments table if it doesn't exist
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                                   WHERE table_schema = 'mail_archiver' 
                                   AND table_name = 'EmailAttachments') THEN
                        CREATE TABLE mail_archiver.""EmailAttachments"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""ArchivedEmailId"" integer NOT NULL,
                            ""FileName"" text NOT NULL,
                            ""ContentType"" text NOT NULL,
                            ""Content"" bytea NOT NULL,
                            ""Size"" bigint NOT NULL,
                            CONSTRAINT ""PK_EmailAttachments"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_EmailAttachments_ArchivedEmails_ArchivedEmailId"" 
                                FOREIGN KEY (""ArchivedEmailId"") 
                                REFERENCES mail_archiver.""ArchivedEmails"" (""Id"") 
                                ON DELETE CASCADE
                        );
                        
                        CREATE INDEX ""IX_EmailAttachments_ArchivedEmailId"" ON mail_archiver.""EmailAttachments"" (""ArchivedEmailId"");
                    END IF;
                END $$;
            ");

            // Ensure all required indexes exist (for legacy systems that might be missing them)
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Check and create missing indexes
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'mail_archiver' AND tablename = 'ArchivedEmails' AND indexname = 'IX_ArchivedEmails_MailAccountId') THEN
                        CREATE INDEX ""IX_ArchivedEmails_MailAccountId"" ON mail_archiver.""ArchivedEmails"" (""MailAccountId"");
                    END IF;
                    
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'mail_archiver' AND tablename = 'ArchivedEmails' AND indexname = 'IX_ArchivedEmails_SentDate') THEN
                        CREATE INDEX ""IX_ArchivedEmails_SentDate"" ON mail_archiver.""ArchivedEmails"" (""SentDate"");
                    END IF;
                    
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'mail_archiver' AND tablename = 'Users' AND indexname = 'IX_Users_Username') THEN
                        CREATE UNIQUE INDEX ""IX_Users_Username"" ON mail_archiver.""Users"" (""Username"");
                    END IF;
                    
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'mail_archiver' AND tablename = 'Users' AND indexname = 'IX_Users_Email') THEN
                        CREATE UNIQUE INDEX ""IX_Users_Email"" ON mail_archiver.""Users"" (""Email"");
                    END IF;
                    
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'mail_archiver' AND tablename = 'UserMailAccounts' AND indexname = 'IX_UserMailAccounts_MailAccountId') THEN
                        CREATE INDEX ""IX_UserMailAccounts_MailAccountId"" ON mail_archiver.""UserMailAccounts"" (""MailAccountId"");
                    END IF;
                    
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'mail_archiver' AND tablename = 'UserMailAccounts' AND indexname = 'IX_UserMailAccounts_UserId_MailAccountId') THEN
                        CREATE UNIQUE INDEX ""IX_UserMailAccounts_UserId_MailAccountId"" ON mail_archiver.""UserMailAccounts"" (""UserId"", ""MailAccountId"");
                    END IF;
                    
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'mail_archiver' AND tablename = 'EmailAttachments' AND indexname = 'IX_EmailAttachments_ArchivedEmailId') THEN
                        CREATE INDEX ""IX_EmailAttachments_ArchivedEmailId"" ON mail_archiver.""EmailAttachments"" (""ArchivedEmailId"");
                    END IF;
                END $$;
            ");

            // Data migration: Handle potential data inconsistencies
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Ensure all MailAccounts have ExcludedFolders set to empty string if NULL
                    UPDATE mail_archiver.""MailAccounts"" 
                    SET ""ExcludedFolders"" = '' 
                    WHERE ""ExcludedFolders"" IS NULL;
                    
                    -- Ensure all text fields in ArchivedEmails are not NULL
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""Subject"" = '' WHERE ""Subject"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""Body"" = '' WHERE ""Body"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""HtmlBody"" = '' WHERE ""HtmlBody"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""From"" = '' WHERE ""From"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""To"" = '' WHERE ""To"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""Cc"" = '' WHERE ""Cc"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""Bcc"" = '' WHERE ""Bcc"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""FolderName"" = '' WHERE ""FolderName"" IS NULL;
                    
                    UPDATE mail_archiver.""ArchivedEmails"" 
                    SET ""MessageId"" = '' WHERE ""MessageId"" IS NULL;
                END $$;
            ");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            // Drop tables in reverse order to respect foreign key constraints
            migrationBuilder.Sql(@"
                DROP TABLE IF EXISTS mail_archiver.""EmailAttachments"" CASCADE;
                DROP TABLE IF EXISTS mail_archiver.""UserMailAccounts"" CASCADE;
                DROP TABLE IF EXISTS mail_archiver.""ArchivedEmails"" CASCADE;
                DROP TABLE IF EXISTS mail_archiver.""Users"" CASCADE;
                DROP TABLE IF EXISTS mail_archiver.""MailAccounts"" CASCADE;
                DROP SCHEMA IF EXISTS mail_archiver CASCADE;
            ");
        }
    }
}
